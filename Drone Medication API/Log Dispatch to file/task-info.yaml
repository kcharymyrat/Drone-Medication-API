type: edu
files:
  - name: src/DroneMed/DroneMedicationAPIApplication.java
    visible: true
    text: |-
      package DroneMed;
      
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class DroneMedicationAPIApplication {
      
          public static void main(String[] args)  throws Exception {
              SpringApplication.run(DroneMedicationAPIApplication.class, args);
          }
      
      
      }
    learner_created: false
  - name: src/DroneMed/Runner.java
    visible: true
    text: |
      package DroneMed;
      
      import DroneMed.models.Drone;
      import DroneMed.models.Medication;
      import DroneMed.models.UserAccount;
      import DroneMed.service.DroneService;
      import DroneMed.service.MedicationService;
      import DroneMed.service.UserService;
      import org.springframework.boot.CommandLineRunner;
      import org.springframework.stereotype.Component;
      
      import java.util.List;
      import java.util.Optional;
      import java.util.Scanner;
      import java.util.Stack;
      
      @Component
      public class Runner implements CommandLineRunner {
      
          private final DroneService droneService;
      
          private final MedicationService medicationService;
      
          private final UserService userService;
      
          private final String INVALID_RESPONSE = "Invalid response, please enter a valid response.";
          private final String INVALID_DRONE_PARAM = "The parameters you entered are not valid drone parameters, please enter a valid drone parameter.";
          private final String INVALID_MED_PARAM = "The parameters you entered are not valid medication parameters, please enter a valid medication parameter.";
          private final String INVALID_USER_PARAM = "The parameters you entered are not valid userAccounts parameters, please enter a valid userAccounts parameter.";
      
          public Runner(DroneService droneService, MedicationService medicationService, UserService userService) {
              this.droneService = droneService;
              this.medicationService = medicationService;
              this.userService = userService;
          }
      
          @Override
          public void run(String... args) throws Exception {
              Scanner scanner = new Scanner(System.in);
              System.out.println("Enter instruction for drone medication API...");
              int response = 0;
              lastResponse = response;
              currentAction = Action.DEFAULT;
              currentMode = Mode.DEFAULT;
              availableOptions = 4;
              System.out.println(options[response]);
      
              while (running) {
      
                  //We expect int response
                  if (currentMode == Mode.DEFAULT) {
                      try {
                          response = scanner.nextInt();
                          if(currentAction == Action.DEFAULT && (response < BASE_OPTION || response > availableOptions)) {
                              System.out.println(INVALID_RESPONSE);
                              response = lastResponse; //reset response to default;
                          }
                          else if(currentAction != Action.DEFAULT && (response < BASE_OPTION || response > availableOptions)) {
                              System.out.println(INVALID_RESPONSE);
                              response = lastResponse; //reset response to default;
                          }
                          else response = processResponse(response, "");
                      }
                      catch (Exception e) {
                          System.out.println(INVALID_RESPONSE);
                          scanner.nextLine(); //this is to consume the invalid response
                      }
      
                  }
                  else {
                      //We expect string response
                      String info = scanner.nextLine();
      
                      if(processOptionsB(info)) {
                          response = processResponse(lastResponse, info);
                      }
                  }
      
                  if(currentMode == Mode.DEFAULT) {
                      System.out.println(options[response]);
                  }
              }
      
              scanner.close();
          }
      
          public enum Action {
              DEFAULT,
              DRONES,
              MEDICATIONS,
              USERACCOUNTS
          }
      
          public enum Mode {
              DEFAULT,
              DETAILS,
              UPDATES,
          }
      
      
      
          String[] options = new String[]{
                  """
                  1. Drones
                  2. Medications
                  3. UserAccounts
                  4. Exit""",
                  """
                  1. View Drones
                  2. Create Drone
                  3. Update Drone
                  4. Delete Drone
                  5. Get Drone
                  6. Back""",
                  """
                  1. View Medications
                  2. Create Medication
                  3. Update Medication
                  4. Delete Medication
                  5. Get Medication
                  6. Back""",
                  """
                  1. View UserAccounts
                  2. Create UserAccount
                  3. Update UserAccount
                  4. Delete UserAccount
                  5. Get UserAccount
                  6. Back"""
          };
      
          Action currentAction;
      
          Mode currentMode;
      
          //Stack<Action> lastAction = new Stack();
      
          //To keep response backstack
          Stack<Integer> stack = new Stack();
      
          //flag to exist app
          boolean running = true;
      
          //User Response
          int lastResponse;
      
          int availableOptions = 0;
          final int BASE_OPTION = 1;
      
          private Optional<Drone> buildDrone(String[] values) {
      
              try {
                  Drone drone = Drone.builder()
                          .serialNumber(values[0].trim())
                          .maxWeight(Integer.parseInt(values[1].trim()))
                          .currentWeight(Integer.parseInt(values[2].trim()))
                          .batteryCapacity(Integer.parseInt(values[3].trim()))
                          .state(Drone.State.valueOf(values[4].trim()))
                          .model(Drone.Model.valueOf(values[5].trim()))
                          .currentCoordinate(values[6].trim())
                          .build();
      
                  return Optional.ofNullable(drone);
              } catch (Exception e) {
                  System.out.println(INVALID_DRONE_PARAM);
              }
      
              return Optional.ofNullable(null);
          }
      
          private Optional<Medication> buildMedication(String[] values) {
      
              try {
                  Medication medication = Medication.builder()
                          .code(values[0].trim())
                          .name(values[1].trim())
                          .weight(Integer.parseInt(values[2].trim()))
                          .imageURL(values[3].trim())
                          .build();
      
                  return Optional.ofNullable(medication);
              } catch (Exception e) {
                  System.out.println(INVALID_MED_PARAM);
              }
      
              return Optional.ofNullable(null);
          }
      
          private Optional<UserAccount> buildUserAccounts(String[] values) {
      
              try {
                  UserAccount userAccount = UserAccount.builder()
                          .account(UserAccount.Account.valueOf(values[0].trim()))
                          .name(values[1].trim())
                          .phoneNumber(values[2].trim())
                          .address(values[3].trim())
                          .gpsCoordinate(values[4].trim())
                          .build();
      
                  return Optional.ofNullable(userAccount);
              } catch (Exception e) {
                  System.out.println(INVALID_USER_PARAM);
              }
      
              return Optional.ofNullable(null);
          }
      
      
          private int processResponse(int res, String info) {
      
              int value = res;
              //lastResponse = res;
      
              if(currentAction == Action.DEFAULT) {
                  if(value == 4) {
                      System.exit(0);
                  }
                  else if (value >= 1 && value <= 4) {
                      //Set Action
                      if(value == 0) currentAction = Action.DEFAULT;
                      else if(value == 1) currentAction = Action.DRONES;
                      else if(value == 2) currentAction = Action.MEDICATIONS;
                      else if(value == 3) currentAction = Action.USERACCOUNTS;
      
                      if(stack.size() < 1)  stack.push(0);
                      lastResponse = value;
                      availableOptions = 6;
                      return value;
                  }
                  else {
                      System.out.println(INVALID_RESPONSE);
                      return  lastResponse;
                  }
              }
              else if(currentAction == Action.DRONES && currentMode == Mode.DEFAULT) {
                  if(value == 6) {
                      currentAction = Action.DEFAULT;
                      availableOptions = 4;
                      return stack.pop();
                  }
                  else if (value >= 1 && value <= 5) {
                      if(stack.size() < 2) stack.push(1);
                      DroneProcessor(value, info);
                      lastResponse = value;
                      return value;
                  }
                  else {
                      System.out.println(INVALID_RESPONSE);
                      return  lastResponse;
                  }
              }
              else if(currentAction == Action.MEDICATIONS && currentMode == Mode.DEFAULT) {
                  if(value == 6) {
                      currentAction = Action.DEFAULT;
                      availableOptions = 4;
                      return stack.pop();
                  }
                  else if (value >= 1 && value <= 5) {
                      if(stack.size() < 2)  stack.push(2);
                      MedicationProcessor(value, info);
                      lastResponse = value;
                      return value;
                  }
                  else {
                      System.out.println(INVALID_RESPONSE);
                      return  lastResponse;
                  }
              }
              else if(currentAction == Action.USERACCOUNTS && currentMode == Mode.DEFAULT) {
                  if(value == 6) {
                      currentAction = Action.DEFAULT;
                      availableOptions = 4;
                      return stack.pop();
                  }
                  else if (value >= 1 && value <= 5) {
                      if(stack.size() < 2)  stack.push(3);
                      UserAccountProcessor(value, info);
                      lastResponse = value;
                      return value;
                  }
                  else {
                      System.out.println(INVALID_RESPONSE);
                      return  lastResponse;
                  }
              }
              else if(currentMode == Mode.DETAILS ) {
                  if(value == 1 || info.equals("1")) {
                      availableOptions = 6;
                      currentMode = Mode.DEFAULT;
                      lastResponse = stack.peek();
                      return stack.pop();
                  }
                  else if(value == 2) {
                      if(currentAction == Action.DRONES) {
                          if(lastResponse == 2 || lastResponse == 3) {
                              DroneProcessor(2, "");
                          }
                          else   DroneProcessor(lastResponse, "");
                      }
                      else if(currentAction == Action.MEDICATIONS) {
                          if(lastResponse == 2 || lastResponse == 3) {
                              MedicationProcessor(2, "");
                          }
                          else MedicationProcessor(lastResponse, "");
                      }
                      else if(currentAction == Action.USERACCOUNTS) {
                          if(lastResponse == 2 || lastResponse == 3) {
                              UserAccountProcessor(2, "");
                          }
                          else UserAccountProcessor(lastResponse, "");
                      }
                  }
                  else if(checkValidInt(info) && info.equals("2")) {
                      if(currentAction == Action.DRONES) {
                          DroneProcessor(lastResponse, info);
                      }
                      else if(currentAction == Action.MEDICATIONS) {
                          MedicationProcessor(lastResponse, info);
                      }
                      else if(currentAction == Action.USERACCOUNTS) {
                          UserAccountProcessor(lastResponse, info);
                      }
                  }
                  else {
                      System.out.println(INVALID_RESPONSE);
                      return  lastResponse;
                  }
              }
              else if(currentMode == Mode.UPDATES) {
                  //Check if back was clicked
                  if(checkValidInt(info) && Integer.parseInt(info) == 1) {
                      currentMode = Mode.DEFAULT;
                      availableOptions = 6;
                      lastResponse = stack.peek();
                      return stack.pop();
                  }
      
                  //String[] values = info.replaceAll("\\s+", "").split(",");
                  String[] values = info.trim().split(",");
      
                  availableOptions = 2;
      
                  //Create and update
                  if(value == 2 || value == 3) {
                      if(currentAction == Action.DRONES) {
                          if(values.length == 0 || values.length != 7) {
                              System.out.println(INVALID_DRONE_PARAM);
                          }
                          else if( value == 2) {
                              Optional<Drone> drone = buildDrone(values);
                              if (drone.isPresent()) {
                                  String response = droneService.createDrone(drone.get());
                                  System.out.println("Create Drones" + "\n" + "1. Back" + "\n" + "2. Create more Drones");
                                  System.out.println(response);
                                  currentMode = Mode.DETAILS;
                              }
                          }
                          else if( value == 3) {
                              Optional<Drone> drone = buildDrone(values);
                              if (drone.isPresent()) {
                                  String response = droneService.updateDrone(drone.get());
                                  System.out.println("Updated Drone" + "\n" + "1. Back" + "\n" + "2. Update more Drones");
                                  System.out.println(response);
                                  currentMode = Mode.DETAILS;
                              }
                          }
                      }
                      else if(currentAction == Action.MEDICATIONS) {
                          if(values.length == 0 || values.length != 4) {
                              System.out.println(INVALID_MED_PARAM);
                          }
                          else if( value == 2) {
                              Optional<Medication> medication = buildMedication(values);
                              if (medication.isPresent()) {
                                  String response = medicationService.createMedication(medication.get());
                                  System.out.println("Create medications" + "\n" + "1. Back" + "\n" + "2. Create more medications");
                                  System.out.println(response);
                                  currentMode = Mode.DETAILS;
                              }
                          }
                          else if( value == 3) {
                              Optional<Medication> medication = buildMedication(values);
                              if (medication.isPresent()) {
                                  String response = medicationService.updateMedication(medication.get());
                                  System.out.println("Updated medications" + "\n" + "1. Back" + "\n" + "2. Update more medications");
                                  System.out.println(response);
                                  currentMode = Mode.DETAILS;
                              }
                          }
                      }
                      else if(currentAction == Action.USERACCOUNTS) {
                          if(values.length == 0 || values.length != 5) {
                              System.out.println(INVALID_USER_PARAM);
                          }
                          else if( value == 2) {
                              Optional<UserAccount> userAccount = buildUserAccounts(values);
                              if (userAccount.isPresent()) {
                                  String response = userService.createUser(userAccount.get());
                                  System.out.println("Create userAccounts" + "\n" + "1. Back" + "\n" + "2. Create more userAccounts");
                                  System.out.println(response);
                                  currentMode = Mode.DETAILS;
                              }
                          }
                          else if( value == 3) {
                              Optional<UserAccount> userAccount = buildUserAccounts(values);
                              if (userAccount.isPresent()) {
                                  String response = userService.updateUser(userAccount.get());
                                  System.out.println("Updated userAccounts" + "\n" + "1. Back" + "\n" + "2. Update more userAccounts");
                                  System.out.println(response);
                                  currentMode = Mode.DETAILS;
                              }
                          }
                      }
                  } else if (value == 4 || value == 5) {
                      if(currentAction == Action.DRONES) {
                          if( value == 4) {
      
                              String response = droneService.deleteDrone(values[0]);
                              System.out.println("Delete Drones" + "\n" + "1. Back" + "\n" + "2. Delete more Drones");
                              System.out.println(response);
                              // if(!response.endsWith("not found.")) {
                              currentMode = Mode.DETAILS;
                              //}
      
      
                          }
                          else if( value == 5) {
                              Optional<Drone> drone = droneService.getDrone(values[0]);
                              System.out.println("Get Drone" + "\n" + "1. Back" + "\n" + "2. Get more Drones");
                              if(drone.isPresent()) {
                                  System.out.println(drone.get().toString());
                              }
                              else System.out.println("Drone with serial number " + values[0] + " not found.");
                              currentMode = Mode.DETAILS;
                          }
                      }
                      else if(currentAction == Action.MEDICATIONS) {
                          if( value == 4) {
      
                              String response = medicationService.deleteMedication(values[0]);
                              System.out.println("Delete medications" + "\n" + "1. Back" + "\n" + "2. Delete more medications");
                              System.out.println(response);
                              currentMode = Mode.DETAILS;
      
                          }
                          else if( value == 5) {
                              Optional<Medication> medication = medicationService.getMedication(values[0]);
                              System.out.println("Get medications" + "\n" + "1. Back" + "\n" + "2. Get more medications");
                              if(medication.isPresent()) {
                                  System.out.println(medication.get().toString());
                              }
                              else System.out.println("Medication with code " + values[0] + " not found.");
                              currentMode = Mode.DETAILS;
                          }
                      }
                      else if(currentAction == Action.USERACCOUNTS) {
                          if( value == 4) {
      
                              String response =  userService.deleteUser(values[0]);
                              System.out.println("Delete userAccounts" + "\n" + "1. Back" + "\n" + "2. Delete more userAccounts");
                              System.out.println(response);
                              currentMode = Mode.DETAILS;
      
                          }
                          else if( value == 5) {
                              Optional<UserAccount> userAccount =  userService.getUser(values[0]);
                              System.out.println("Get userAccounts" + "\n" + "1. Back" + "\n" + "2. Get more userAccounts");
                              if(userAccount.isPresent()) {
                                  System.out.println(userAccount.get().toString());
                              }
                              else System.out.println("UserAccount with phone number " + values[0] + " not found.");
                              currentMode = Mode.DETAILS;
                          }
                      }
                  }
      
                  return lastResponse;
              }
      
      
      
              return  0;
          }
      
          private boolean checkValidInt(String s) {
              try {
                  if(s.length() > 1) return false;
                  int number = Integer.parseInt(s);
                  return true;
              } catch (NumberFormatException e) {
                  return false;
              }
          }
      
          private void UserAccountProcessor(int option, String info) {
              availableOptions = 1;
              if(option == 1) {
      
                  System.out.println("View UserAccounts" + "\n" + "1. Back");
                  currentMode = Mode.DETAILS;
                  List<UserAccount> userAccounts = userService.getAllUsers();
      
                  if(userAccounts.isEmpty()) System.out.println("The UserAccounts list is empty.");
                  else {
                      System.out.println("UserAccounts list");
                      for (int i=0; i < userAccounts.size(); i++) {
                          System.out.println(i + 1  + ". " + userAccounts.get(i).toString());
                      }
                  }
              }
              else if(option == 2) {
                  System.out.println("Create UserAccount" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
                  System.out.println("Enter new UserAccount information...." + "\n" + "User accountType, name, phoneNumber, address, gps coordinates ");
      
              }
              else if(option == 3) {
                  System.out.println("Update UserAccount" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
      
                  List<UserAccount> userAccounts = userService.getAllUsers();
      
                  if(userAccounts.isEmpty()) System.out.println("The UserAccounts list is empty.");
                  else {
                      System.out.println("UserAccounts list");
                      for (int i=0; i < userAccounts.size(); i++) {
                          System.out.println(i + 1  + ". " + userAccounts.get(i).toString());
                      }
      
                      System.out.println("Enter UserAccount ID to update...." + "\n" + "User accountType, name, phoneNumber, address, gps coordinates  ");
                  }
              }
              else if(option == 4) {
                  System.out.println("Delete UserAccount" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
                  List<UserAccount> userAccounts = userService.getAllUsers();
      
                  if(userAccounts.isEmpty()) System.out.println("The UserAccounts list is empty.");
                  else {
                      System.out.println("UserAccounts list");
                      for (int i=0; i < userAccounts.size(); i++) {
                          System.out.println(i + 1  + ". " + userAccounts.get(i).toString());
                      }
      
                      System.out.println("Enter UserAccount ID to Delete...");
                  }
              }
              else if(option == 5) {
                  System.out.println("Get UserAccount" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
                  System.out.println("Enter the UserAccount ID that you want to retrieve.");
              }
          }
      
          private void MedicationProcessor(int option, String info) {
              availableOptions = 1;
              if(option == 1) {
                  System.out.println("View medications" + "\n" + "1. Back");
                  currentMode = Mode.DETAILS;
                  List<Medication> medications = medicationService.getAllMedication();
      
                  if(medications.isEmpty()) System.out.println("The medication list is empty.");
                  else {
                      System.out.println("Medications list");
                      for (int i=0; i < medications.size(); i++) {
                          System.out.println(i + 1  + ". " + medications.get(i).toString());
                      }
                  }
              }
              else if(option == 2) {
                  System.out.println("Create medications" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
      
                  System.out.println("Enter new medication information...." + "\n" + "medication code, name, weight, imageURL ");
      
              }
              else if(option == 3) {
                  System.out.println("Update medications" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
      
                  List<Medication> medications = medicationService.getAllMedication();
      
                  if(medications.isEmpty()) System.out.println("The medications list is empty.");
                  else {
                      System.out.println("Medications list");
                      for (int i=0; i < medications.size(); i++) {
                          System.out.println(i + 1  + ". " + medications.get(i).toString());
                      }
      
                      System.out.println("Enter medication ID to update...." + "\n" + "medication code, name, weight, imageURL ");
                  }
              }
              else if(option == 4) {
                  System.out.println("Delete medications" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
      
                  List<Medication> medications = medicationService.getAllMedication();
      
                  if(medications.isEmpty()) System.out.println("The medications list is empty.");
                  else {
                      System.out.println("Medications list");
                      for (int i=0; i < medications.size(); i++) {
                          System.out.println(i + 1  + ". " + medications.get(i).toString());
                      }
      
                      System.out.println("Enter medication ID to Delete...");
                  }
              }
              else if(option == 5) {
                  System.out.println("Get medications" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
      
                  System.out.println("Enter the medication ID that you want to retrieve.");
              }
          }
      
          private void DroneProcessor(int option, String info) {
              availableOptions = 1;
              if(option == 1) {
      
                  System.out.println("View drones" + "\n" + "1. Back");
                  currentMode = Mode.DETAILS;
                  List<Drone> drones = droneService.getAllDrones();
      
                  if(drones.isEmpty()) System.out.println("The drone list is empty.");
                  else {
                      System.out.println("Drones list");
                      for (int i=0; i < drones.size(); i++) {
                          System.out.println(i + 1  + ". " + drones.get(i).toString());
                      }
                  }
              }
              else if(option == 2) {
                  System.out.println("Create drones" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
      
                  System.out.println("Enter new drone information...." + "\n" + "Serial Number, Max Weight, CurrentWeight, Battery Capacity, Drone State, Drone Model, GPS Coordinates");
      
              }
              else if(option == 3) {
                  System.out.println("Update drones" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
      
                  List<Drone> drones = droneService.getAllDrones();
      
                  if(drones.isEmpty()) System.out.println("The drones list is empty.");
                  else {
                      System.out.println("Drones list");
                      for (int i=0; i < drones.size(); i++) {
                          System.out.println(i + 1  + ". " + drones.get(i).toString());
                      }
      
                      System.out.println("Enter drone ID to update...." + "\n" + "Serial Number, Max Weight, CurrentWeight, Battery Capacity, Drone State, Drone Model, GPS Coordinates ");
                  }
              }
              else if(option == 4) {
                  System.out.println("Delete drones" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
      
                  List<Drone> drones = droneService.getAllDrones();
      
                  if(drones.isEmpty()) System.out.println("The drones list is empty.");
                  else {
                      System.out.println("Drones list");
                      for (int i=0; i < drones.size(); i++) {
                          System.out.println(i + 1  + ". " + drones.get(i).toString());
                      }
      
                      System.out.println("Enter drone ID to Delete....");
                  }
              }
              else if(option == 5) {
                  System.out.println("Get drones" + "\n" + "1. Back");
                  currentMode = Mode.UPDATES;
      
                  System.out.println("Enter drone the ID that you want to retrieve.");
              }
          }
      
      
          private boolean processOptionsB(String info) {
      
              if(info.length() > 0 && currentMode == Mode.DETAILS && availableOptions == 1 && !info.equals("1")) {
                  System.out.println(INVALID_RESPONSE);
                  return false;
              }
              else if(info.length() > 0 && currentMode == Mode.DETAILS && availableOptions == 2 && !info.equals("1") && !info.equals("2")) {
                  System.out.println(INVALID_RESPONSE);
                  return false;
              }
              else if(info.length() > 0 && currentMode == Mode.UPDATES && info.length() == 1 && availableOptions == 2 && !info.equals("1") && !info.equals("2")) {
                  System.out.println(INVALID_RESPONSE);
                  return false;
              }
              else if(info.length() > 0 && currentMode == Mode.UPDATES && info.length() == 1 && availableOptions == 1 && !info.equals("1")) {
                  System.out.println(INVALID_RESPONSE);
                  return false;
              }
      
              return info.length() > 0;
          }
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
      spring.jackson.serialization.INDENT_OUTPUT=true
      spring.datasource.driverClassName=org.h2.Driver
      spring.datasource.url=jdbc:h2:file:../droneAPI_db
      spring.datasource.username=root
      spring.datasource.password=1234
      spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
      spring.jpa.hibernate.ddl-auto=create
      spring.h2.console.enabled=true
      spring.h2.console.settings.trace=false
      spring.h2.console.settings.web-allow-others=false
      spring.h2.console.path=/h2
      server.error.include-message=always
      # spring.jpa.show-sql=true
      logging.level.DroneMed=DEBUG
      spring.main.web-application-type=NONE
      server.port=8080
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'com.h2database:h2'
          implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
          compileOnly 'org.projectlombok:lombok:1.18.30'
          annotationProcessor 'org.projectlombok:lombok:1.18.30'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/DroneMedicationAPIApplicationTest.java
    visible: false
    text: |-
      import DroneMed.DroneMedicationAPIApplication;
      import com.fasterxml.jackson.annotation.JsonInclude;
      import com.fasterxml.jackson.core.JsonProcessingException;
      import com.fasterxml.jackson.databind.ObjectMapper;
      import com.fasterxml.jackson.databind.SerializationFeature;
      import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.io.File;
      import java.io.FileNotFoundException;
      import java.sql.Timestamp;
      import java.time.Instant;
      import java.time.LocalTime;
      import java.util.*;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      
      public class DroneMedicationAPIApplicationTest extends SpringTest {
        public DroneMedicationAPIApplicationTest () {
          super(DroneMedicationAPIApplication.class, 28852, "../droneMed_db_mv.db");
        }
      
        //Drone info
        double latitude = 4.8156; //Random gps used as drone base coordinates
        double longitude = 7.0498; //Random gps used as drone base coordinates
        String coordinatesString = String.format("%.6fN %.6fE", latitude, longitude);
      
        //Drones
        private  final Drone drone1 = new Drone("S001", 100, 0, 10000, Drone.State.IDLE, Drone.Model.LIGHTWEIGHT, coordinatesString);
        private  final String drone1Correct = drone1.toJson();
      
        String msgDrone1 = "The drone with serial number S001 was created successfully.";
        private  final Drone drone2 = new Drone("S002", 200, 0, 15000, Drone.State.IDLE, Drone.Model.MIDDLEWEIGHT, coordinatesString);
        private  final String drone2Correct = drone2.toJson();
        String msgDrone2 = "The drone with serial number S002 was created successfully.";
      
        //Medication
        private  final Medication medication1 = new Medication("M001", "Paracetamol", 30, "https://th.bing.com/th/id/OIP.CjEDMQk7TEODMKh4MZFfGgD6D6?w=166&h=180&c=7&r=0&o=5&pid=1.7");
        private  final String medication1Correct = medication1.toJson();
        String msgMedication1 = "The medication with code M001 was created successfully.";
      
        private  final Medication medication2 = new Medication("M002", "Paracetamol", 38, "https://th.bing.com/th/id/OIP.CjEDMQk7TEODMKh4MZFfGgD6D6?w=166&h=180&c=7&r=0&o=5&pid=1.7");
        private  final String medication2Correct = medication2.toJson();
        String msgMedication2 = "The medication with code M002 was created successfully.";
        private  final Medication medication3 = new Medication("M006","Amoxicillin", 65, "https://th.bing.com/th/id/R.86be7f194443ce59c5e21c0e78302e50?rik=5XJ7UyNSYyE6Yw&pid=ImgRaw&r=0");
        private  final String medication3Correct = medication3.toJson();
        String msgMedication3 = "The medication with code M006 was created successfully.";
        private  final Medication medication4 = new Medication("M004", "Ibuprofen", 48, "https://th.bing.com/th/id/OIP.Nzkzq0Ic2me02XDdxi2DxQHaE8?rs=1&pid=ImgDetMain");
        private  final String medication4Correct = medication4.toJson();
        String msgMedication4 = "The medication with code M004 was created successfully.";
        private  final Medication medication5 = new Medication("M005", "Metformin", 80,"https://th.bing.com/th/id/OIP.t1kStl77O7UxOQq0KhCa8AHaD5?rs=1&pid=ImgDetMain");
        private  final String medication5Correct = medication5.toJson();
        String msgMedication5 = "The medication with code M005 was created successfully.";
      
        private  final Medication medication6 = new Medication("M006","Amoxicillin", 65, "https://th.bing.com/th/id/R.86be7f194443ce59c5e21c0e78302e50?rik=5XJ7UyNSYyE6Yw&pid=ImgRaw&r=0");
        private  final String medication6Correct = medication6.toJson();
        String msgMedication6 = "The medication with code M006 was created successfully.";
      
        //MedicationList
        private ArrayList<Medication> medicationsA;
        private ArrayList<Medication> medicationsB;
      
      
        //User create
        private  final UserAccount user1 = new UserAccount(UserAccount.Account.GUEST, "Michael Martinez", "9163456789", "101 Walnut Avenue, San Diego, California(CA), 92101", "32.71574, -117.16109");
        private  final String user1Correct = user1.toJson();
        String msgUser1 = "The user with phone number 9163456789 was created successfully.";
      
        private  final UserAccount user2 = new UserAccount (UserAccount.Account.ADMIN, "Daniel Taylor", "3238765432", "303 Elm Avenue, Oakland, California(CA), 94601", "37.80493, -122.27080");
        private  final String user2Correct = user2.toJson();
        String msgUser2 = "The user with phone number 3238765432 was created successfully.";
      
        //dispatch drone
        private  DroneDispatch droneDispatch1;
        private  String droneDispatch1Correct;
        private  DroneDispatch droneDispatch2;
        private  String droneDispatch2Correct;
      
        private final String msgDispatchCorrect = "Drone dispatched successfully.";
      
        private final String msgDD1log1 = "Drone S001 with a battery level of 10000 amps is on medication delivery.";
      
        private final String msgDD1log2 = "Drone S001 delivery is complete! battery level 9850amps, drone returning to base.";
      
        private final String msgDD1log3 = "Drone S001 has arrived at the base, battery level 9700";
      
        private final String msgDD2log1 = "Drone S002 with a battery level of 15000 amps is on medication delivery.";
        private final String msgDD2log2 = "Drone S002 delivery is complete! battery level 14800amps, drone returning to base.";
        private final String msgDD2log3 = "Drone S002 has arrived at the base, battery level 14600";
      
      
        //Create API
        private final String createDrone = "/api/drones/create_drone";
        private final String createMedication = "/api/medications/create_medication";
        private final String createUser = "/api/users/create_user";
        private  final String dispatchDrone = "/api/dispatch/dispatch_drone";
      
        String okSuccessCode = "OK";
        String notFoundCode = "NOT_FOUND";
      
        CheckResult testSetUps() {
          medicationsA = new ArrayList<>();
          //Set up medication list for dispatch
          medicationsA.add(new Medication("M001", "Paracetamol", 30, "https://th.bing.com/th/id/OIP.CjEDMQk7TEODMKh4MZFfGgD6D6?w=166&h=180&c=7&r=0&o=5&pid=1.7"));
          medicationsA.add(new Medication("M002", "omeprazole", 18, "https://www.drugs.com/images/pills/fio/GMK03970.JPG"));
          medicationsA.add(new Medication("M005", "Metformin", 28,"https://th.bing.com/th/id/OIP.t1kStl77O7UxOQq0KhCa8AHaD5?rs=1&pid=ImgDetMain"));
      
          medicationsB = new ArrayList<>();
          medicationsB.add(new Medication("M006","Amoxicillin", 60, "https://th.bing.com/th/id/R.86be7f194443ce59c5e21c0e78302e50?rik=5XJ7UyNSYyE6Yw&pid=ImgRaw&r=0"));
          medicationsB.add(new Medication("M004", "Ibuprofen", 28, "https://th.bing.com/th/id/OIP.Nzkzq0Ic2me02XDdxi2DxQHaE8?rs=1&pid=ImgDetMain"));
          medicationsB.add(new Medication("M005", "Metformin", 80,"https://th.bing.com/th/id/OIP.t1kStl77O7UxOQq0KhCa8AHaD5?rs=1&pid=ImgDetMain"));
      
      
          droneDispatch1 = new DroneDispatch(drone1, user1,medicationsA, false,LocalTime.of(0,0,15));
          droneDispatch1Correct = droneDispatch1.toJson();
      
          droneDispatch2 = new DroneDispatch(drone2, user2,medicationsB, false,LocalTime.of(0,0,20));
          droneDispatch2Correct = droneDispatch2.toJson();
      
          return CheckResult.correct();
        }
      
        CheckResult testCreateApi(String api, String body, String message, String status) {
          HttpResponse response = post(api, body).send();
      
          //Check json in response
          if(!response.getJson().isJsonObject()) {
            return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                    response.getContent().getClass());
          }
      
          expect(response.getContent()).asJson().check(isObject()
                  .value("message", message)
                  .value("httpStatus", status)
          );
      
      
          return CheckResult.correct();
        }
      
      
      
        CheckResult testScheduleLog(String expected, long time) {
      
          Thread currentThread = Thread.currentThread();
          try {
            currentThread.sleep(time);
            if(checkFile(expected)) return CheckResult.correct();
          } catch (InterruptedException e) {
            e.printStackTrace();
          } catch (FileNotFoundException e) {
              System.out.println("Exception attempting to read dispatchlog file " +e.getMessage().toString());
          }
      
      
            return CheckResult.wrong("The program did not write to file at time expected with content " + expected );
        }
      
        boolean checkFile(String expected) throws FileNotFoundException {
          String filePath = "log/dispatchlog.txt";
          File file = new File(filePath);
          Scanner scanner = new Scanner(file);
      
          //read content till the end
          String lastUpdate = "";
          while (scanner.hasNextLine()) {
            lastUpdate = scanner.nextLine();
          }
      
          scanner.close();
          //check we have expected string
          if (lastUpdate.trim().toLowerCase().contains(expected.trim().toLowerCase())) {
            return true;
          } else {
            return false;
          }
        }
      
        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
      
                () -> testCreateApi(createDrone,drone1Correct, msgDrone1,okSuccessCode ),
                () -> testCreateApi(createDrone,drone2Correct, msgDrone2,okSuccessCode ),
      
                () -> testCreateApi(createMedication,medication1Correct, msgMedication1,okSuccessCode ),
                () -> testCreateApi(createMedication,medication2Correct, msgMedication2,okSuccessCode ),
                () -> testCreateApi(createMedication,medication3Correct, msgMedication3,okSuccessCode ),
                () -> testCreateApi(createMedication,medication4Correct, msgMedication4,okSuccessCode ),
                () -> testCreateApi(createMedication,medication5Correct, msgMedication5,okSuccessCode ),
      
                () -> testCreateApi(createUser,user1Correct, msgUser1,okSuccessCode ),
                () -> testCreateApi(createUser,user2Correct, msgUser2,okSuccessCode ),
      
                () -> testSetUps(),
                () -> testCreateApi(dispatchDrone,droneDispatch1Correct, msgDispatchCorrect,okSuccessCode ),
                //after 1min 31 sec
                () -> testScheduleLog(msgDD1log1,1000), //wait half sec for system to write to file
                () -> testScheduleLog(msgDD1log2,15000), //wait 15sec
                () -> testScheduleLog(msgDD1log3,15000), //wait 15sec
                () -> testCreateApi(dispatchDrone,droneDispatch2Correct, msgDispatchCorrect,okSuccessCode ),
                //after 2mins 1 sec
                () -> testScheduleLog(msgDD2log1,1000), //wait half sec for system to write to file
                () -> testScheduleLog(msgDD2log2,20000), //wait 20sec
                () -> testScheduleLog(msgDD2log3,20000), //wait 20sec
      
        };
      
      }
      
      class Drone {
      
      
        private String serialNumber;
      
        private int currentWeight;
      
      
        public int maxWeight;
      
        private int batteryCapacity;
      
        private Model model;
      
        private State state;
      
        private String currentCoordinate;
      
        //This represents the different models of drones
        public enum Model {
          LIGHTWEIGHT,
          MIDDLEWEIGHT,
          CRUISERWEIGHT,
          HEAVYWEIGHT
        }
      
        //Different states the drone can be in
        public enum State {
          IDLE,
          DELIVERING,
          DELIVERED,
          RETURNING
        }
      
        public Drone(String serialNumber, int maxWeight, int currentWeight, int batteryCapacity, State state, Model model, String currentCoordinate) {
          this.serialNumber = serialNumber;
          this.maxWeight = maxWeight;
          this.currentWeight = currentWeight;
          this.batteryCapacity = batteryCapacity;
          this.state = state;
          this.model = model;
          this.currentCoordinate = currentCoordinate;
        }
      
        public String getSerialNumber() {
          return serialNumber;
        }
      
        public void setSerialNumber(String serialNumber) {
          this.serialNumber = serialNumber;
        }
      
        public int getCurrentWeight() {
          return currentWeight;
        }
      
        public void setCurrentWeight(int currentWeight) {
          this.currentWeight = currentWeight;
        }
      
        public int getBatteryCapacity() {
          return batteryCapacity;
        }
      
        public void setBatteryCapacity(int batteryCapacity) {
          this.batteryCapacity = batteryCapacity;
        }
      
        public Model getModel() {
          return model;
        }
      
        public void setModel(Model model) {
          this.model = model;
        }
      
        public State getState() {
          return state;
        }
      
        public void setState(State state) {
          this.state = state;
        }
      
        public int getMaxWeight() {
          return maxWeight;
        }
      
        public void setMaxWeight(int max_weight) {
          this.maxWeight = max_weight;
        }
      
        public String getCurrentCoordinate() {
          return currentCoordinate;
        }
      
        public void setCurrentCoordinate(String currentCoordinate) {
          this.currentCoordinate = currentCoordinate;
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          try {
            return mapper.writeValueAsString(this);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      }
      
      class Medication {
      
        private String code;
      
        private String name;
      
        private int weight;
      
        private String imageURL;
      
        public Medication(String code, String name, int weight,  String imageURL) {
          this.name = name;
          this.weight = weight;
          this.code = code;
          this.imageURL = imageURL;
        }
      
        public String getCode() {
          return code;
        }
      
        public void setCode(String code) {
          this.code = code;
        }
      
        public String getName() {
          return name;
        }
      
        public void setName(String name) {
          this.name = name;
        }
      
        public int getWeight() {
          return weight;
        }
      
        public void setWeight(int weight) {
          this.weight = weight;
        }
      
        public String getImageURL() {
          return imageURL;
        }
      
        public void setImageURL(String imageURL) {
          this.imageURL = imageURL;
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          try {
            return mapper.writeValueAsString(this);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      
      
      }
      
      class UserAccount {
      
        private String name;
      
        private String phoneNumber;
      
        private String address;
      
        private String gpsCoordinate;
      
        private Account account;
      
        public enum Account {
          ADMIN,
          CUSTOMER,
          GUEST,
        }
      
      
        public UserAccount(Account _account, String _name, String _phoneNumber, String _address, String _gpsCoordinate) {
          this.account = _account;
          this.name = _name;
          this.phoneNumber = _phoneNumber;
          this.address = _address;
          this.gpsCoordinate = _gpsCoordinate;
        }
      
        public Account getAccount() {
          return account;
        }
      
        public void setAccount(Account account) {
          this.account = account;
        }
      
        public String getName() {
          return name;
        }
      
        public void setName(String name) {
          this.name = name;
        }
      
        public String getPhoneNumber() {
          return phoneNumber;
        }
      
        public void setPhoneNumber(String phoneNumber) {
          this.phoneNumber = phoneNumber;
        }
      
        public String getAddress() {
          return address;
        }
      
        public void setAddress(String address) {
          this.address = address;
        }
      
        public String getGpsCoordinate() {
          return gpsCoordinate;
        }
      
        public void setGpsCoordinate(String gpsCoordinate) {
          this.gpsCoordinate = gpsCoordinate;
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          try {
            return mapper.writeValueAsString(this);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      }
      
      class DroneDispatch {
      
      
        private Long dispatchId;
      
        private boolean cancelled = false;
      
        private LocalTime estimatedTime;
      
        private Timestamp timestamp;
      
        private Drone drone;
      
        private UserAccount user;
      
        private List<Medication> medications;
      
        public DroneDispatch() {}
      
        public DroneDispatch(Drone drone, UserAccount user, List<Medication> medications, boolean cancelled, LocalTime estimatedTime) {
          this.cancelled = cancelled;
          this.estimatedTime = estimatedTime;
          this.drone = drone;
          this.user = user;
          this.medications = medications;
          this.timestamp = Timestamp.from(Instant.now());
        }
      
        public Long getDispatchId() {
          return dispatchId;
        }
        public boolean isCancelled() {
          return cancelled;
        }
      
        public void setCancelled(boolean cancelled) {
          this.cancelled = cancelled;
        }
      
        public LocalTime getEstimatedTime() {
          return estimatedTime;
        }
      
        public void setEstimatedTime(LocalTime estimatedTime) {
          this.estimatedTime = estimatedTime;
        }
      
        public Timestamp getTimestamp() {
          return timestamp;
        }
      
        public UserAccount getUser() {
          return user;
        }
      
        public Drone getDrone() {
          return drone;
        }
      
        public List<Medication> getMedications() {
          return medications;
        }
      
        public void setMedications(List<Medication> medications) {
          this.medications = medications;
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          mapper.registerModule(new JavaTimeModule());
          mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); //this helps accept local time
      
          try {
            return mapper.writeValueAsString(this);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      
      }
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/45549#comment
status: Unchecked
record: -1
