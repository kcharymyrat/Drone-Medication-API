type: edu
files:
  - name: src/DroneMed/DroneMedicationAPIApplication.java
    visible: true
    text: |-
      package DroneMed;
      
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class DroneMedicationAPIApplication {
      
          public static void main(String[] args)  throws Exception {
              SpringApplication.run(DroneMedicationAPIApplication.class, args);
          }
      
      
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
      spring.jackson.serialization.INDENT_OUTPUT=true
      spring.datasource.driverClassName=org.h2.Driver
      spring.datasource.url=jdbc:h2:file:../droneAPI_db
      spring.datasource.username=root
      spring.datasource.password=1234
      spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
      spring.jpa.hibernate.ddl-auto=create
      spring.h2.console.enabled=true
      spring.h2.console.settings.trace=false
      spring.h2.console.settings.web-allow-others=false
      spring.h2.console.path=/h2
      server.error.include-message=always
      # spring.jpa.show-sql=true
      logging.level.DroneMed=DEBUG
      spring.main.web-application-type=NONE
      server.port=8080
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'com.h2database:h2'
          implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
          compileOnly 'org.projectlombok:lombok:1.18.30'
          annotationProcessor 'org.projectlombok:lombok:1.18.30'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/DroneMedicationAPIApplicationTest.java
    visible: false
    text: |-
      import DroneMed.DroneMedicationAPIApplication;
      import com.fasterxml.jackson.annotation.JsonInclude;
      import com.fasterxml.jackson.core.JsonProcessingException;
      import com.fasterxml.jackson.databind.ObjectMapper;
      import com.fasterxml.jackson.databind.SerializationFeature;
      import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.io.File;
      import java.io.FileNotFoundException;
      import java.sql.Timestamp;
      import java.time.Instant;
      import java.time.LocalTime;
      import java.util.*;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      
      public class DroneMedicationAPIApplicationTest extends SpringTest {
        public DroneMedicationAPIApplicationTest () {
          super(DroneMedicationAPIApplication.class, 28852, "../droneMed_db_mv.db");
        }
      
        //Drone info
        double latitude = 4.8156; //Random gps used as drone base coordinates
        double longitude = 7.0498; //Random gps used as drone base coordinates
        String coordinatesString = String.format("%.6fN %.6fE", latitude, longitude);
      
        //Drones
        private  final Drone drone1 = new Drone("S001", 100, 0, 10000, Drone.State.IDLE, Drone.Model.LIGHTWEIGHT, coordinatesString);
        private  final String drone1Correct = drone1.toJson();
      
        String msgDrone1 = "The drone with serial number S001 was created successfully.";
        private  final Drone drone2 = new Drone("S002", 200, 0, 15000, Drone.State.IDLE, Drone.Model.MIDDLEWEIGHT, coordinatesString);
        private  final String drone2Correct = drone2.toJson();
        String msgDrone2 = "The drone with serial number S002 was created successfully.";
      
        //Medication
        private  final Medication medication1 = new Medication("M001", "Paracetamol", 30, "https://th.bing.com/th/id/OIP.CjEDMQk7TEODMKh4MZFfGgD6D6?w=166&h=180&c=7&r=0&o=5&pid=1.7");
        private  final String medication1Correct = medication1.toJson();
        String msgMedication1 = "The medication with code M001 was created successfully.";
      
        private  final Medication medication2 = new Medication("M002", "Paracetamol", 38, "https://th.bing.com/th/id/OIP.CjEDMQk7TEODMKh4MZFfGgD6D6?w=166&h=180&c=7&r=0&o=5&pid=1.7");
        private  final String medication2Correct = medication2.toJson();
        String msgMedication2 = "The medication with code M002 was created successfully.";
        private  final Medication medication3 = new Medication("M006","Amoxicillin", 65, "https://th.bing.com/th/id/R.86be7f194443ce59c5e21c0e78302e50?rik=5XJ7UyNSYyE6Yw&pid=ImgRaw&r=0");
        private  final String medication3Correct = medication3.toJson();
        String msgMedication3 = "The medication with code M006 was created successfully.";
        private  final Medication medication4 = new Medication("M004", "Ibuprofen", 48, "https://th.bing.com/th/id/OIP.Nzkzq0Ic2me02XDdxi2DxQHaE8?rs=1&pid=ImgDetMain");
        private  final String medication4Correct = medication4.toJson();
        String msgMedication4 = "The medication with code M004 was created successfully.";
        private  final Medication medication5 = new Medication("M005", "Metformin", 80,"https://th.bing.com/th/id/OIP.t1kStl77O7UxOQq0KhCa8AHaD5?rs=1&pid=ImgDetMain");
        private  final String medication5Correct = medication5.toJson();
        String msgMedication5 = "The medication with code M005 was created successfully.";
      
        private  final Medication medication6 = new Medication("M006","Amoxicillin", 65, "https://th.bing.com/th/id/R.86be7f194443ce59c5e21c0e78302e50?rik=5XJ7UyNSYyE6Yw&pid=ImgRaw&r=0");
        private  final String medication6Correct = medication6.toJson();
        String msgMedication6 = "The medication with code M006 was created successfully.";
      
        //MedicationList
        private ArrayList<Medication> medicationsA;
        private ArrayList<Medication> medicationsB;
      
      
        //User create
        private  final UserAccount user1 = new UserAccount(UserAccount.Account.GUEST, "Michael Martinez", "9163456789", "101 Walnut Avenue, San Diego, California(CA), 92101", "32.71574, -117.16109");
        private  final String user1Correct = user1.toJson();
        String msgUser1 = "The user with phone number 9163456789 was created successfully.";
      
        private  final UserAccount user2 = new UserAccount (UserAccount.Account.ADMIN, "Daniel Taylor", "3238765432", "303 Elm Avenue, Oakland, California(CA), 94601", "37.80493, -122.27080");
        private  final String user2Correct = user2.toJson();
        String msgUser2 = "The user with phone number 3238765432 was created successfully.";
      
        //dispatch drone
        private  DroneDispatch droneDispatch1;
        private  String droneDispatch1Correct;
        private  DroneDispatch droneDispatch2;
        private  String droneDispatch2Correct;
      
        private final String msgDispatchCorrect = "Drone dispatched successfully.";
      
        private final String msgDD1log1 = "Drone S001 with a battery level of 10000 amps is on medication delivery.";
      
        private final String msgDD1log2 = "Drone S001 delivery is complete! battery level 9850amps, drone returning to base.";
      
        private final String msgDD1log3 = "Drone S001 has arrived at the base, battery level 9700";
      
        private final String msgDD2log1 = "Drone S002 with a battery level of 15000 amps is on medication delivery.";
        private final String msgDD2log2 = "Drone S002 delivery is complete! battery level 14800amps, drone returning to base.";
        private final String msgDD2log3 = "Drone S002 has arrived at the base, battery level 14600";
      
      
        //Create API
        private final String createDrone = "/api/drones/create_drone";
        private final String createMedication = "/api/medications/create_medication";
        private final String createUser = "/api/users/create_user";
        private  final String dispatchDrone = "/api/dispatch/dispatch_drone";
      
        String okSuccessCode = "OK";
        String notFoundCode = "NOT_FOUND";
      
        CheckResult testSetUps() {
          medicationsA = new ArrayList<>();
          //Set up medication list for dispatch
          medicationsA.add(new Medication("M001", "Paracetamol", 30, "https://th.bing.com/th/id/OIP.CjEDMQk7TEODMKh4MZFfGgD6D6?w=166&h=180&c=7&r=0&o=5&pid=1.7"));
          medicationsA.add(new Medication("M002", "omeprazole", 18, "https://www.drugs.com/images/pills/fio/GMK03970.JPG"));
          medicationsA.add(new Medication("M005", "Metformin", 28,"https://th.bing.com/th/id/OIP.t1kStl77O7UxOQq0KhCa8AHaD5?rs=1&pid=ImgDetMain"));
      
          medicationsB = new ArrayList<>();
          medicationsB.add(new Medication("M006","Amoxicillin", 60, "https://th.bing.com/th/id/R.86be7f194443ce59c5e21c0e78302e50?rik=5XJ7UyNSYyE6Yw&pid=ImgRaw&r=0"));
          medicationsB.add(new Medication("M004", "Ibuprofen", 28, "https://th.bing.com/th/id/OIP.Nzkzq0Ic2me02XDdxi2DxQHaE8?rs=1&pid=ImgDetMain"));
          medicationsB.add(new Medication("M005", "Metformin", 80,"https://th.bing.com/th/id/OIP.t1kStl77O7UxOQq0KhCa8AHaD5?rs=1&pid=ImgDetMain"));
      
      
          droneDispatch1 = new DroneDispatch(drone1, user1,medicationsA, false,LocalTime.of(0,0,15));
          droneDispatch1Correct = droneDispatch1.toJson();
      
          droneDispatch2 = new DroneDispatch(drone2, user2,medicationsB, false,LocalTime.of(0,0,20));
          droneDispatch2Correct = droneDispatch2.toJson();
      
          return CheckResult.correct();
        }
      
        CheckResult testCreateApi(String api, String body, String message, String status) {
          HttpResponse response = post(api, body).send();
      
          //Check json in response
          if(!response.getJson().isJsonObject()) {
            return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                    response.getContent().getClass());
          }
      
          expect(response.getContent()).asJson().check(isObject()
                  .value("message", message)
                  .value("httpStatus", status)
          );
      
      
          return CheckResult.correct();
        }
      
      
      
        CheckResult testScheduleLog(String expected, long time) {
      
          Thread currentThread = Thread.currentThread();
          try {
            currentThread.sleep(time);
            if(checkFile(expected)) return CheckResult.correct();
          } catch (InterruptedException e) {
            e.printStackTrace();
          } catch (FileNotFoundException e) {
              System.out.println("Exception attempting to read dispatchlog file " +e.getMessage().toString());
          }
      
      
            return CheckResult.wrong("The program did not write to file at time expected with content " + expected );
        }
      
        boolean checkFile(String expected) throws FileNotFoundException {
          String filePath = "log/dispatchlog.txt";
          File file = new File(filePath);
          Scanner scanner = new Scanner(file);
      
          //read content till the end
          String lastUpdate = "";
          while (scanner.hasNextLine()) {
            lastUpdate = scanner.nextLine();
          }
      
          scanner.close();
          //check we have expected string
          if (lastUpdate.trim().toLowerCase().contains(expected.trim().toLowerCase())) {
            return true;
          } else {
            return false;
          }
        }
      
        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
      
                () -> testCreateApi(createDrone,drone1Correct, msgDrone1,okSuccessCode ),
                () -> testCreateApi(createDrone,drone2Correct, msgDrone2,okSuccessCode ),
      
                () -> testCreateApi(createMedication,medication1Correct, msgMedication1,okSuccessCode ),
                () -> testCreateApi(createMedication,medication2Correct, msgMedication2,okSuccessCode ),
                () -> testCreateApi(createMedication,medication3Correct, msgMedication3,okSuccessCode ),
                () -> testCreateApi(createMedication,medication4Correct, msgMedication4,okSuccessCode ),
                () -> testCreateApi(createMedication,medication5Correct, msgMedication5,okSuccessCode ),
      
                () -> testCreateApi(createUser,user1Correct, msgUser1,okSuccessCode ),
                () -> testCreateApi(createUser,user2Correct, msgUser2,okSuccessCode ),
      
                () -> testSetUps(),
                () -> testCreateApi(dispatchDrone,droneDispatch1Correct, msgDispatchCorrect,okSuccessCode ),
                //after 1min 31 sec
                () -> testScheduleLog(msgDD1log1,1000), //wait half sec for system to write to file
                () -> testScheduleLog(msgDD1log2,15000), //wait 15sec
                () -> testScheduleLog(msgDD1log3,15000), //wait 15sec
                () -> testCreateApi(dispatchDrone,droneDispatch2Correct, msgDispatchCorrect,okSuccessCode ),
                //after 2mins 1 sec
                () -> testScheduleLog(msgDD2log1,1000), //wait half sec for system to write to file
                () -> testScheduleLog(msgDD2log2,20000), //wait 20sec
                () -> testScheduleLog(msgDD2log3,20000), //wait 20sec
      
        };
      
      }
      
      class Drone {
      
      
        private String serialNumber;
      
        private int currentWeight;
      
      
        public int maxWeight;
      
        private int batteryCapacity;
      
        private Model model;
      
        private State state;
      
        private String currentCoordinate;
      
        //This represents the different models of drones
        public enum Model {
          LIGHTWEIGHT,
          MIDDLEWEIGHT,
          CRUISERWEIGHT,
          HEAVYWEIGHT
        }
      
        //Different states the drone can be in
        public enum State {
          IDLE,
          DELIVERING,
          DELIVERED,
          RETURNING
        }
      
        public Drone(String serialNumber, int maxWeight, int currentWeight, int batteryCapacity, State state, Model model, String currentCoordinate) {
          this.serialNumber = serialNumber;
          this.maxWeight = maxWeight;
          this.currentWeight = currentWeight;
          this.batteryCapacity = batteryCapacity;
          this.state = state;
          this.model = model;
          this.currentCoordinate = currentCoordinate;
        }
      
        public String getSerialNumber() {
          return serialNumber;
        }
      
        public void setSerialNumber(String serialNumber) {
          this.serialNumber = serialNumber;
        }
      
        public int getCurrentWeight() {
          return currentWeight;
        }
      
        public void setCurrentWeight(int currentWeight) {
          this.currentWeight = currentWeight;
        }
      
        public int getBatteryCapacity() {
          return batteryCapacity;
        }
      
        public void setBatteryCapacity(int batteryCapacity) {
          this.batteryCapacity = batteryCapacity;
        }
      
        public Model getModel() {
          return model;
        }
      
        public void setModel(Model model) {
          this.model = model;
        }
      
        public State getState() {
          return state;
        }
      
        public void setState(State state) {
          this.state = state;
        }
      
        public int getMaxWeight() {
          return maxWeight;
        }
      
        public void setMaxWeight(int max_weight) {
          this.maxWeight = max_weight;
        }
      
        public String getCurrentCoordinate() {
          return currentCoordinate;
        }
      
        public void setCurrentCoordinate(String currentCoordinate) {
          this.currentCoordinate = currentCoordinate;
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          try {
            return mapper.writeValueAsString(this);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      }
      
      class Medication {
      
        private String code;
      
        private String name;
      
        private int weight;
      
        private String imageURL;
      
        public Medication(String code, String name, int weight,  String imageURL) {
          this.name = name;
          this.weight = weight;
          this.code = code;
          this.imageURL = imageURL;
        }
      
        public String getCode() {
          return code;
        }
      
        public void setCode(String code) {
          this.code = code;
        }
      
        public String getName() {
          return name;
        }
      
        public void setName(String name) {
          this.name = name;
        }
      
        public int getWeight() {
          return weight;
        }
      
        public void setWeight(int weight) {
          this.weight = weight;
        }
      
        public String getImageURL() {
          return imageURL;
        }
      
        public void setImageURL(String imageURL) {
          this.imageURL = imageURL;
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          try {
            return mapper.writeValueAsString(this);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      
      
      }
      
      class UserAccount {
      
        private String name;
      
        private String phoneNumber;
      
        private String address;
      
        private String gpsCoordinate;
      
        private Account account;
      
        public enum Account {
          ADMIN,
          CUSTOMER,
          GUEST,
        }
      
      
        public UserAccount(Account _account, String _name, String _phoneNumber, String _address, String _gpsCoordinate) {
          this.account = _account;
          this.name = _name;
          this.phoneNumber = _phoneNumber;
          this.address = _address;
          this.gpsCoordinate = _gpsCoordinate;
        }
      
        public Account getAccount() {
          return account;
        }
      
        public void setAccount(Account account) {
          this.account = account;
        }
      
        public String getName() {
          return name;
        }
      
        public void setName(String name) {
          this.name = name;
        }
      
        public String getPhoneNumber() {
          return phoneNumber;
        }
      
        public void setPhoneNumber(String phoneNumber) {
          this.phoneNumber = phoneNumber;
        }
      
        public String getAddress() {
          return address;
        }
      
        public void setAddress(String address) {
          this.address = address;
        }
      
        public String getGpsCoordinate() {
          return gpsCoordinate;
        }
      
        public void setGpsCoordinate(String gpsCoordinate) {
          this.gpsCoordinate = gpsCoordinate;
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          try {
            return mapper.writeValueAsString(this);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      }
      
      class DroneDispatch {
      
      
        private Long dispatchId;
      
        private boolean cancelled = false;
      
        private LocalTime estimatedTime;
      
        private Timestamp timestamp;
      
        private Drone drone;
      
        private UserAccount user;
      
        private List<Medication> medications;
      
        public DroneDispatch() {}
      
        public DroneDispatch(Drone drone, UserAccount user, List<Medication> medications, boolean cancelled, LocalTime estimatedTime) {
          this.cancelled = cancelled;
          this.estimatedTime = estimatedTime;
          this.drone = drone;
          this.user = user;
          this.medications = medications;
          this.timestamp = Timestamp.from(Instant.now());
        }
      
        public Long getDispatchId() {
          return dispatchId;
        }
        public boolean isCancelled() {
          return cancelled;
        }
      
        public void setCancelled(boolean cancelled) {
          this.cancelled = cancelled;
        }
      
        public LocalTime getEstimatedTime() {
          return estimatedTime;
        }
      
        public void setEstimatedTime(LocalTime estimatedTime) {
          this.estimatedTime = estimatedTime;
        }
      
        public Timestamp getTimestamp() {
          return timestamp;
        }
      
        public UserAccount getUser() {
          return user;
        }
      
        public Drone getDrone() {
          return drone;
        }
      
        public List<Medication> getMedications() {
          return medications;
        }
      
        public void setMedications(List<Medication> medications) {
          this.medications = medications;
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          mapper.registerModule(new JavaTimeModule());
          mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); //this helps accept local time
      
          try {
            return mapper.writeValueAsString(this);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      
      }
    learner_created: false
  - name: src/DroneMed/models/UserAccount.java
    visible: true
    text: |
      package DroneMed.models;
      
      import javax.persistence.Entity;
      import javax.persistence.EnumType;
      import javax.persistence.Enumerated;
      import javax.persistence.Id;
      import javax.validation.constraints.NotNull;
      
      @Entity
      public class UserAccount {
      
          @NotNull
          @Enumerated(EnumType.STRING)
          private Account account;
      
          @NotNull
          private String name;
      
          @Id
          private String phoneNumber;
      
          @NotNull
          private String address;
      
          @NotNull
          private String gpsCoordinate;
      
          public UserAccount() {
          }
      
          public UserAccount(Account account, String name, String phoneNumber, String address, String gpsCoordinate) {
              this.account = account;
              this.name = name;
              this.phoneNumber = phoneNumber;
              this.address = address;
              this.gpsCoordinate = gpsCoordinate;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public String getPhoneNumber() {
              return phoneNumber;
          }
      
          public void setPhoneNumber(String phoneNumber) {
              this.phoneNumber = phoneNumber;
          }
      
          public String getAddress() {
              return address;
          }
      
          public void setAddress(String address) {
              this.address = address;
          }
      
          public String getGpsCoordinate() {
              return gpsCoordinate;
          }
      
          public void setGpsCoordinate(String gpsCoordinate) {
              this.gpsCoordinate = gpsCoordinate;
          }
      
          public Account getAccount() {
              return account;
          }
      
          public void setAccount(Account account) {
              this.account = account;
          }
      
          @Override
          public String toString() {
              return "UserAccount name: " + this.getName()+ " phoneNumber: " + this.getPhoneNumber() + " address: " + this.getAddress() + " account: " + this.getAccount();
          }
      }
    learner_created: true
  - name: src/DroneMed/repositories/DroneRepository.java
    visible: true
    text: |
      package DroneMed.repositories;
      
      import DroneMed.models.Drone;
      import DroneMed.models.DroneModel;
      import DroneMed.models.DroneState;
      import org.springframework.data.jpa.repository.JpaRepository;
      import org.springframework.data.repository.CrudRepository;
      
      import java.util.List;
      import java.util.Optional;
      
      public interface DroneRepository extends JpaRepository<Drone, String> {
          Drone findBySerialNumber(String serialNumber);
          List<Optional<Drone>> findDronesByModel(DroneModel model);
          List<Optional<Drone>> findDronesByState(DroneState state);
          List<Optional<Drone>> findDronesByBatteryCapacityAfter(int percentage);
      }
    learner_created: true
  - name: src/DroneMed/controllers/MedicationController.java
    visible: true
    text: |
      package DroneMed.controllers;
      
      import DroneMed.models.Medication;
      import DroneMed.models.MedicationDTO;
      import DroneMed.responses.ResponseHandler;
      import DroneMed.services.MedicationService;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;
      
      import java.util.List;
      import java.util.Optional;
      
      @RestController
      @RequestMapping("/medications")
      public class MedicationController {
      
          private final MedicationService medicationService;
      
          @Autowired
          public MedicationController(MedicationService medicationService) {
              this.medicationService = medicationService;
          }
      
          @PostMapping("/create_medication")
          public ResponseEntity<?> createMedication(@RequestBody Medication medication) {
              String res = medicationService.createMedication(medication);
              return ResponseHandler.responseBuilder(res, HttpStatus.OK);
          }
      
          @PostMapping("/create_medications")
          public ResponseEntity<?> createMedications(@RequestBody List<Medication> medications) {
              List<String> res = medicationService.createMedications(medications);
              return ResponseHandler.responseBuilder("Medications created successfully.", HttpStatus.OK, res);
          }
      
          @PutMapping("/update_medication")
          public ResponseEntity<?> updateMedication(@RequestBody Medication medication) {
              String res = medicationService.updateMedication(medication);
              if(res.contains("not found.")) {
                  return ResponseHandler.responseBuilder(res, HttpStatus.NOT_FOUND);
              }
              return ResponseHandler.responseBuilder(res, HttpStatus.OK);
          }
      
          @DeleteMapping("/delete_medication/{code}")
          public ResponseEntity<?> deleteMedication(@PathVariable String code) {
              String res = medicationService.deleteMedication(code);
              if(res.contains("not found.")) {
                  return ResponseHandler.responseBuilder(res, HttpStatus.NOT_FOUND);
              }
              return ResponseHandler.responseBuilder(res, HttpStatus.OK);
          }
      
          @GetMapping("/get_medication/{code}")
          public ResponseEntity<?> getMedication(@PathVariable String code) {
              Optional<Medication> medication = medicationService.getMedication(code);
              if (medication.isPresent()) {
                  return ResponseHandler.responseBuilder("Medication fetched successfully.", HttpStatus.OK, medication);
              }
              return ResponseHandler.responseBuilder(
                      "The medication with code " + code + " was not found.", HttpStatus.NOT_FOUND
              );
          }
      
      
          @GetMapping("/get_all_medications")
          public ResponseEntity<?> getAllMedication() {
              List<Medication> medications = medicationService.getAllMedication();
              if(medications.isEmpty()) {
                  return ResponseHandler.responseBuilder("The medication list is empty.", HttpStatus.OK);
              }
              return ResponseHandler.responseBuilder("All medications fetched successfully.", HttpStatus.OK, medications);
          }
      
          @GetMapping("/get_by_name/{name}")
          public ResponseEntity<?> getMedicationByName(@PathVariable String name) {
              List<MedicationDTO> medication = medicationService.getMedicationByName(name);
              if(medication.isEmpty()) {
                  return ResponseHandler.responseBuilder("The medication list by name " + name + " is empty.", HttpStatus.OK);
              }
              return ResponseHandler.responseBuilder("Medications fetched successfully.", HttpStatus.OK, medication);
          }
      
      }
    learner_created: true
  - name: src/DroneMed/models/MedicationDTO.java
    visible: true
    text: |
      package DroneMed.models;
      
      public class MedicationDTO {
          private String code;
      
          private String name;
      
          private int weight;
      
          private String imageURL;
      
          private long droneDispatchID;
      
          public MedicationDTO(
                  String code,
                  String name,
                  int weight,
                  String imageURL,
                  long droneDispatchID
          ) {
              this.code = code;
              this.name = name;
              this.weight = weight;
              this.imageURL = imageURL;
              this.droneDispatchID = droneDispatchID;
          }
      
          public String getCode() {
              return code;
          }
      
          public void setCode(String code) {
              this.code = code;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public int getWeight() {
              return weight;
          }
      
          public void setWeight(int weight) {
              this.weight = weight;
          }
      
          public String getImageURL() {
              return imageURL;
          }
      
          public void setImageURL(String imageURL) {
              this.imageURL = imageURL;
          }
      
          public long getDroneDispatchID() {
              return droneDispatchID;
          }
      
          public void setDroneDispatchID(long droneDispatchID) {
              this.droneDispatchID = droneDispatchID;
          }
      }
    learner_created: true
  - name: src/DroneMed/services/DroneService.java
    visible: true
    text: |
      package DroneMed.services;
      
      import DroneMed.models.DroneModel;
      import DroneMed.models.DroneState;
      import DroneMed.repositories.DroneRepository;
      import DroneMed.models.Drone;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.stereotype.Service;
      
      import javax.transaction.Transactional;
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Optional;
      
      @Service
      public class DroneService {
          private final DroneRepository repository;
      
          @Autowired
          public DroneService(DroneRepository repository) {
              this.repository = repository;
          }
      
          public List<Drone> getAllDrones() {
              return (List<Drone>) repository.findAll();
          }
      
          public String createDrone(Drone drone) {
              try {
                  repository.save(drone);
                  return "The drone with serial number " + drone.getSerialNumber() + " was created successfully.";
              } catch (Exception e) {
                  return "The parameter you entered contains a null or invalid parameter, Please enter a valid drone parameter.";
              }
          }
      
          public String updateDrone(Drone drone) {
              try {
                  if (repository.findBySerialNumber(drone.getSerialNumber()) == null) {
                      return "The drone with serial number " + drone.getSerialNumber() + " was not found.";
                  }
                  repository.save(drone);
                  return "The drone with serial number " + drone.getSerialNumber() + " was updated successfully.";
              } catch (Exception e) {
                  return "The drone with serial number " + drone.getSerialNumber() + " was not found.";
              }
          }
      
          public String deleteDrone(String serialNumber) {
              try {
                  repository.delete(repository.findBySerialNumber(serialNumber));
                  return "The drone with serial number "+ serialNumber + " was deleted Successfully.";
              } catch (Exception e) {
                  return "The drone with serial number " + serialNumber + " was not found.";
              }
          }
      
          public Drone getDrone(String serialNumber) {
              return repository.findBySerialNumber(serialNumber);
          }
      
          @Transactional
          public List<String> createDrones(List<Drone> drones) {
              List<String> res = new ArrayList<>();
              for (Drone drone : drones) {
                  res.add(createDrone(drone));
              }
              return res;
          }
      
          public List<Optional<Drone>> findDroneByState(DroneState state) {
              return repository.findDronesByState(state);
          }
      
          public List<Optional<Drone>> findDronesByModel(DroneModel model) {
              return repository.findDronesByModel(model);
          }
      
          public List<Optional<Drone>> findDronesByBatteryCapacityAfter(int percentage) {
              return repository.findDronesByBatteryCapacityAfter(percentage);
          }
      
      }
    learner_created: true
  - name: src/DroneMed/models/Medication.java
    visible: true
    text: |
      package DroneMed.models;
      
      import javax.persistence.*;
      import javax.validation.constraints.NotNull;
      
      @Entity
      public class Medication {
          @Id
          private String code;
          @NotNull
          private String name;
      
          @NotNull
          private int weight;
      
          private String imageURL;
      
          @ManyToOne
          @JoinColumn(name = "dispatchId")
          private  DroneDispatch droneDispatch;
      
          public Medication() {
          }
      
          public Medication(String code, String name, int weight, String imageURL, DroneDispatch droneDispatch) {
              this.code = code;
              this.name = name;
              this.weight = weight;
              this.imageURL = imageURL;
              this.droneDispatch = droneDispatch;
          }
      
          public String getCode() {
              return code;
          }
      
          public void setCode(String code) {
              this.code = code;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public int getWeight() {
              return weight;
          }
      
          public void setWeight(int weight) {
              this.weight = weight;
          }
      
          public String getImageURL() {
              return imageURL;
          }
      
          public void setImageURL(String imageURL) {
              this.imageURL = imageURL;
          }
      
          public DroneDispatch getDroneDispatch() {
              return droneDispatch;
          }
      
          public void setDroneDispatch(DroneDispatch droneDispatch) {
              this.droneDispatch = droneDispatch;
          }
      
          @Override
          public String toString() {
              return "Medication code: " + this.getCode() + " name: " + this.getName() + " Weight: " + this.getWeight() + " imageURL: " + this.getImageURL();
          }
      }
    learner_created: true
  - name: src/DroneMed/models/Drone.java
    visible: true
    text: |
      package DroneMed.models;
      
      import javax.persistence.Entity;
      import javax.persistence.EnumType;
      import javax.persistence.Enumerated;
      import javax.persistence.Id;
      import javax.validation.constraints.NotNull;
      
      @Entity
      public class Drone {
          @Id
          private String serialNumber;
          @NotNull
          private int maxWeight;
          @NotNull
          private int currentWeight;
          @NotNull
          private int batteryCapacity;
          @NotNull
          @Enumerated(EnumType.STRING)
          private DroneState state;
          @NotNull
          @Enumerated(EnumType.STRING)
          private DroneModel model;
          @NotNull
          private String currentCoordinate;
      
          public Drone() {
          }
      
          public Drone(
                  String serialNumber,
                  int maxWeight,
                  int currentWeight,
                  int batteryCapacity,
                  DroneState state,
                  DroneModel model,
                  String currentCoordinate
          ) {
              this.serialNumber = serialNumber;
              this.maxWeight = maxWeight;
              this.currentWeight = currentWeight;
              this.batteryCapacity = batteryCapacity;
              this.state = state;
              this.model = model;
              this.currentCoordinate = currentCoordinate;
          }
      
          public String getSerialNumber() {
              return serialNumber;
          }
      
          public void setSerialNumber(String serialNumber) {
              this.serialNumber = serialNumber;
          }
      
          public int getMaxWeight() {
              return maxWeight;
          }
      
          public void setMaxWeight(int maxWeight) {
              this.maxWeight = maxWeight;
          }
      
          public int getCurrentWeight() {
              return currentWeight;
          }
      
          public void setCurrentWeight(int currentWeight) {
              this.currentWeight = currentWeight;
          }
      
          public int getBatteryCapacity() {
              return batteryCapacity;
          }
      
          public void setBatteryCapacity(int batteryCapacity) {
              this.batteryCapacity = batteryCapacity;
          }
      
          public DroneState getState() {
              return state;
          }
      
          public void setState(DroneState state) {
              this.state = state;
          }
      
          public DroneModel getModel() {
              return model;
          }
      
          public void setModel(DroneModel model) {
              this.model = model;
          }
      
          public String getCurrentCoordinate() {
              return currentCoordinate;
          }
      
          public void setCurrentCoordinate(String currentCoordinate) {
              this.currentCoordinate = currentCoordinate;
          }
      
          @Override
          public String toString() {
              return "Drone serialnumber: " + this.getSerialNumber() + " maxWeight: " + this.getMaxWeight() + " currentWeight: " + this.getCurrentWeight() + " batteryCapacity: " + this.getBatteryCapacity() +
                      " State: " + this.getState() + " Model: " + this.model + " Coordinate: " + this.getCurrentCoordinate();
          }
      }
    learner_created: true
  - name: src/DroneMed/repositories/DroneDispatchRepository.java
    visible: true
    text: |
      package DroneMed.repositories;
      
      import DroneMed.models.DroneDispatch;
      import org.springframework.data.jpa.repository.JpaRepository;
      import org.springframework.data.repository.CrudRepository;
      
      import java.util.List;
      import java.util.Optional;
      
      public interface DroneDispatchRepository extends JpaRepository<DroneDispatch, Long> {
      }
    learner_created: true
  - name: src/DroneMed/mappers/DroneDispatchMapper.java
    visible: true
    text: |
      package DroneMed.mappers;
      
      import DroneMed.models.Medication;
      import DroneMed.models.DroneDispatch;
      import DroneMed.models.DroneDispatchDTO;
      import org.springframework.stereotype.Component;
      
      import java.util.Optional;
      import java.util.stream.Collectors;
      
      @Component
      public class DroneDispatchMapper {
      
          public DroneDispatchDTO droneDispatchToDroneDispatchDTO(DroneDispatch droneDispatch) {
              return new DroneDispatchDTO(
                      droneDispatch.getDispatchId(),
                      droneDispatch.isCancelled(),
                      droneDispatch.getEstimatedTime(),
                      droneDispatch.getDrone().getSerialNumber(),
                      droneDispatch.getDrone().getState().toString(),
                      droneDispatch.getUser().getName(),
                      droneDispatch.getUser().getPhoneNumber(),
                      droneDispatch.getMedications().stream()
                              .map(Medication::getCode).collect(Collectors.toList())
              );
          }
      
          public DroneDispatchDTO droneDispatchToDroneDispatchDTO(Optional<DroneDispatch> droneDispatch) {
              return new DroneDispatchDTO(
                      droneDispatch.get().getDispatchId(),
                      droneDispatch.get().isCancelled(),
                      droneDispatch.get().getEstimatedTime(),
                      droneDispatch.get().getDrone().getSerialNumber(),
                      droneDispatch.get().getDrone().getState().toString(),
                      droneDispatch.get().getUser().getName(),
                      droneDispatch.get().getUser().getPhoneNumber(),
                      droneDispatch.get().getMedications().stream()
                              .map(Medication::getCode).collect(Collectors.toList())
              );
          }
      }
    learner_created: true
  - name: src/DroneMed/services/MedicationService.java
    visible: true
    text: |
      package DroneMed.services;
      
      import DroneMed.mappers.MedicationMapper;
      import DroneMed.models.Medication;
      import DroneMed.models.MedicationDTO;
      import DroneMed.repositories.MedicationRepository;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.stereotype.Service;
      
      import javax.transaction.Transactional;
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Optional;
      import java.util.stream.Collectors;
      
      @Service
      public class MedicationService {
      
          private final MedicationRepository repository;
          private final MedicationMapper medicationMapper;
      
          @Autowired
          public MedicationService(MedicationRepository repository, MedicationMapper medicationMapper) {
              this.repository = repository;
              this.medicationMapper = medicationMapper;
          }
      
      
          public List<Medication> getAllMedication() {
              return (List<Medication>) repository.findAll();
          }
      
          public String createMedication(Medication medication) {
              try {
                  repository.save(medication);
                  return "The medication with code " + medication.getCode() + " was created successfully.";
              } catch (Exception e) {
                  return "The parameter you entered contains a null or invalid parameter, Please enter a valid medication parameter.";
              }
          }
      
         public String updateMedication(Medication medication) {
             try {
                 if (repository.findByCode(medication.getCode()) == null) {
                     return "The medication with code " + medication.getCode() + " was not found.";
                 }
                 repository.save(medication);
                 return "The medication with code " + medication.getCode() + " was updated successfully.";
             } catch (Exception e) {
                 return "The medication with code " + medication.getCode() + " was not found.";
             }
         }
      
         public String deleteMedication(String code) {
             try {
                 repository.delete(repository.findByCode(code));
                 return "The medication with code " + code + " was deleted Successfully.";
             } catch (Exception e) {
                 return "The medication with code " + code + " was not found.";
             }
         }
      
          public Optional<Medication> getMedication(String value) {
              return Optional.ofNullable(repository.findByCode(value));
          }
      
      
          @Transactional
          public List<String> createMedications(List<Medication> medications) {
              List<String> res = new ArrayList<>();
              for (Medication m: medications) {
                  res.add(createMedication(m));
              }
              return res;
          }
      
          public  List<MedicationDTO> getMedicationByName(String name) {
              return repository.findByName(name).stream()
                      .map(medicationMapper::medicationToMedicationDTO).collect(Collectors.toList());
          }
      }
    learner_created: true
  - name: src/DroneMed/controllers/DispatchController.java
    visible: true
    text: |
      package DroneMed.controllers;
      
      import DroneMed.models.DroneDispatch;
      import DroneMed.models.DroneDispatchDTO;
      import DroneMed.responses.ResponseHandler;
      import DroneMed.services.DroneDispatchService;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;
      
      import java.util.List;
      import java.util.Optional;
      
      @RestController
      @RequestMapping("/dispatch")
      public class DispatchController {
      
          private final DroneDispatchService droneDispatchService;
      
          @Autowired
          public DispatchController(DroneDispatchService droneDispatchService) {
              this.droneDispatchService = droneDispatchService;
          }
      
          @PostMapping("/dispatch_drone")
          public ResponseEntity<?> dispatchDrone(@RequestBody DroneDispatch droneDispatch) {
              String response = droneDispatchService.dispatchDrone(droneDispatch);
              if(response.contains("not found.")) {
                  return ResponseHandler.responseBuilder(response, HttpStatus.NOT_FOUND);
              }
              return ResponseHandler.responseBuilder(response, HttpStatus.OK);
          }
      
          @GetMapping("/get_dispatch/{dispatchId}")
          public ResponseEntity<?> getDispatch(@PathVariable Long dispatchId) {
              Optional<DroneDispatchDTO> droneDispatch = droneDispatchService.getDispatch(dispatchId);
              if(droneDispatch.isPresent()) {
                  return ResponseHandler.responseBuilder("The drone Dispatched fetched successfully.", HttpStatus.OK, droneDispatch);
              }
              return ResponseHandler.responseBuilder("The drone Dispatched with id " + dispatchId + " was not found.", HttpStatus.NOT_FOUND);
      
          }
      
          @GetMapping("/get_all_dispatch")
          public ResponseEntity<?> getAllDispatch() {
              List<DroneDispatchDTO> droneDispatch = droneDispatchService.getAllDispatch();
              if(droneDispatch.isEmpty()) {
                  return ResponseHandler.responseBuilder("The drone dispatch list is empty.", HttpStatus.OK);
              }
              return ResponseHandler.responseBuilder("All Drone Dispatched fetched successfully.", HttpStatus.OK, droneDispatch);
          }
      
      }
    learner_created: true
  - name: src/DroneMed/services/DroneDispatchService.java
    visible: true
    text: "package DroneMed.services;\n\nimport DroneMed.mappers.DroneDispatchMapper;\n\
    import DroneMed.mappers.MedicationMapper;\nimport DroneMed.models.*;\nimport DroneMed.repositories.DroneDispatchRepository;\n\
    import DroneMed.repositories.MedicationRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\n\
    import org.springframework.stereotype.Service;\n\n\nimport javax.transaction.Transactional;\n\
    import java.sql.Timestamp;\nimport java.time.Instant;\nimport java.util.ArrayList;\n\
    import java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\
    \n@Service\npublic class DroneDispatchService {\n\n    private final MedicationRepository\
    \ medicationRepository;\n    private final DroneDispatchRepository droneDispatchRepository;\n\
    \n    private final DroneService droneService;\n    private final UserService\
    \ userService;\n\n    private final DroneDispatchMapper droneDispatchMapper;\n\
    \n\n    @Autowired\n    public DroneDispatchService(\n            MedicationRepository\
    \ medicationRepository,\n            DroneDispatchRepository droneDispatchRepository,\n\
    \            DroneService droneService,\n            UserService userService,\n\
    \            DroneDispatchMapper droneDispatchMapper,\n            MedicationMapper\
    \ medicationMapper\n    ) {\n        this.medicationRepository = medicationRepository;\n\
    \        this.droneDispatchRepository = droneDispatchRepository;\n        this.droneService\
    \ = droneService;\n        this.userService = userService;\n        this.droneDispatchMapper\
    \ = droneDispatchMapper;\n    }\n\n    public String dispatchDrone(DroneDispatch\
    \ droneDispatch) {\n\n        Drone drone = droneDispatch.getDrone();\n      \
    \  String droneNullText = \"----Drone dispatch information is missing a drone!\
    \ It should include details about the actual drone being dispatched.\";\n    \
    \    if(drone == null) return droneNullText;\n\n        List<Medication> medications\
    \ = droneDispatch.getMedications();\n        String medicationsNullText = \"----Drone\
    \ dispatch information is missing medication details! It should include details\
    \ about the actual medications being dispatched.\";\n        if(medications ==\
    \ null) return medicationsNullText;\n\n        UserAccount userAccount = droneDispatch.getUser();\n\
    \        String userNullText = \"-----Drone dispatch information is missing user\
    \ account details! It should include requesting user account information.\";\n\
    \        if(userAccount == null) return userNullText;\n        \n\n        int\
    \ weight = getTotalWeight(droneDispatch.getDrone(), droneDispatch.getMedications());\n\
    \        String weightLimitExceedsText = \"Drone selected cannot carry medications,\
    \ You may reduce the number of medications or choose another drone with a larger\
    \ capacity.\";\n        if(weight == -1) return weightLimitExceedsText;\n\n  \
    \      int batteryCapacity = droneDispatch.getDrone().getBatteryCapacity();\n\
    \        int batteryConsumption = droneDispatch.getEstimatedTime().toSecondOfDay()\
    \  * 10 * 2;\n        String notEnoughBatteryText = \"Drone selected does not\
    \ have enough battery charge to deliver medication.\";\n        if(batteryCapacity\
    \ < batteryConsumption) return notEnoughBatteryText;\n\n        String res = checkMedicationsAvailability(droneDispatch);\n\
    \        if(res.contains(\"not found.\")) return res;\n\n        Optional<UserAccount>\
    \ user = userService.getUser(droneDispatch.getUser().getPhoneNumber());\n    \
    \    if(user.isEmpty()) return \"The user with phone number \" + droneDispatch.getUser().getPhoneNumber()\
    \ + \" was not found.\";\n\n        Drone exactDrone = droneService.getDrone(droneDispatch.getDrone().getSerialNumber());\n\
    \        if(exactDrone == null) return \"The drone with serial number \" + droneDispatch.getDrone().getSerialNumber()\
    \ +  \" was not found.\";\n\n        droneDispatch.setTimestamp(Timestamp.from(Instant.now()));\n\
    \        droneDispatchRepository.save(droneDispatch);\n\n        System.out.println(\"\
    First saved =\" + droneDispatch.toString());\n\n        drone = droneDispatch.getDrone();\n\
    \        drone.setCurrentWeight(weight);\n        var response = droneService.updateDrone(drone);\n\
    \        if(response.contains(\"not found.\")) return response;\n\n        for(Medication\
    \ m: droneDispatch.getMedications()) {\n            Optional<Medication> existingMedication\
    \ = medicationRepository.findById(m.getCode());\n            medicationRepository.save(existingMedication.get());\n\
    \        }\n        return \"Drone dispatched successfully.\";\n    }\n\n\n  \
    \  public Optional<DroneDispatchDTO> getDispatch(Long dispatchId) {\n        System.out.println(\"\
    dispatchDrone: \" + droneDispatchRepository.findById(dispatchId).toString());\n\
    \        return droneDispatchRepository.findById(dispatchId).map(droneDispatchMapper::droneDispatchToDroneDispatchDTO);\n\
    \    }\n\n\n    public List<DroneDispatchDTO> getAllDispatch() {\n        List<DroneDispatch>\
    \ dispatches = (List<DroneDispatch>) droneDispatchRepository.findAll();\n    \
    \    return dispatches.stream().map(droneDispatchMapper::droneDispatchToDroneDispatchDTO).collect(Collectors.toList());\n\
    \    }\n\n    private int getTotalWeight(Drone drone, List<Medication> medications)\
    \ {\n        int totalWeight = 0;\n        for(Medication m: medications) {\n\
    \            totalWeight += m.getWeight();\n        }\n        if(totalWeight\
    \ >= drone.getMaxWeight()) return -1;\n        return totalWeight;\n    }\n\n\n\
    \    private String checkMedicationsAvailability(DroneDispatch droneDispatch)\
    \ {\n        for (Medication m : droneDispatch.getMedications()) {\n         \
    \   Optional<Medication> existingMedication = medicationRepository.findById(m.getCode());\n\
    \            if(existingMedication.isPresent()) {\n                existingMedication.get().setDroneDispatch(droneDispatch);\n\
    \            }\n            else {\n                return \"The medication with\
    \ code \" + m.getCode() + \" was not found.\";\n            }\n        }\n   \
    \     return \"Medication list available.\";\n    }\n\n}\n"
    learner_created: true
  - name: src/DroneMed/responses/ResponseHandler.java
    visible: true
    text: |
      package DroneMed.responses;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      
      import java.util.Map;
      
      public class ResponseHandler {
      
          public static <T> ResponseEntity<Map<String, Object>> responseBuilder(
                  String message, HttpStatus httpStatus, T responseObject) {
      
              Map<String, Object> response = Map.of(
                      "message", message,
                      "httpStatus", httpStatus,
                      "data", responseObject
              );
      
              return new ResponseEntity<>(response, httpStatus);
          }
      
          public static <T> ResponseEntity<Map<String, Object>> responseBuilder(
                  String message, HttpStatus httpStatus) {
      
              Map<String, Object> response = Map.of(
                      "message", message,
                      "httpStatus", httpStatus
              );
      
              return new ResponseEntity<>(response, httpStatus);
          }
      }
    learner_created: true
  - name: src/DroneMed/controllers/DroneController.java
    visible: true
    text: |
      package DroneMed.controllers;
      
      import DroneMed.models.Drone;
      import DroneMed.models.DroneModel;
      import DroneMed.models.DroneState;
      import DroneMed.responses.ResponseHandler;
      import DroneMed.services.DroneService;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;
      
      import java.util.List;
      import java.util.Optional;
      
      @RestController
      @RequestMapping("/drones")
      public class DroneController {
      
          private final DroneService droneService;
      
          @Autowired
          public DroneController(DroneService droneService) {
              this.droneService = droneService;
          }
      
          @PostMapping("/create_drone")
          public ResponseEntity<?> createDrone(@RequestBody Drone drone) {
              String res = droneService.createDrone(drone);
              return ResponseHandler.responseBuilder(res, HttpStatus.OK);
          }
      
          @PostMapping("/create_drones")
          public ResponseEntity<?> createDrones(@RequestBody List<Drone> drones) {
              List<String> res = droneService.createDrones(drones);
              return ResponseHandler.responseBuilder("Drones created successfully.",HttpStatus.OK, res);
          }
      
          @PutMapping("/update_drone")
          public ResponseEntity<?> updateDrone(@RequestBody Drone drone) {
              String res = droneService.updateDrone(drone);
              if (res.contains("not found") ){
                  return ResponseHandler.responseBuilder(res, HttpStatus.NOT_FOUND);
              }
              return ResponseHandler.responseBuilder(res, HttpStatus.OK);
          }
      
          @DeleteMapping("/delete_drone/{serialNumber}")
          public ResponseEntity<?> deleteDrone(@PathVariable String serialNumber) {
              String response = droneService.deleteDrone(serialNumber);
              if(response.contains("not found.")) {
                  return ResponseHandler.responseBuilder(response, HttpStatus.NOT_FOUND);
              }
              return ResponseHandler.responseBuilder(response, HttpStatus.OK);
          }
      
          @GetMapping("/get_drone/{serialNumber}")
          public ResponseEntity<?> getDrone(@PathVariable String serialNumber) {
              Drone drone = droneService.getDrone(serialNumber);
              if(drone != null) {
                  return ResponseHandler.responseBuilder("Drone fetched successfully.", HttpStatus.OK, drone);
              }
              return ResponseHandler.responseBuilder(
                      "The drone with serial number " + serialNumber + " was not found.", HttpStatus.NOT_FOUND
              );
          }
      
          @GetMapping("/get_all_drones")
          public ResponseEntity<?> getAllDrones() {
              List<Drone> drones = droneService.getAllDrones();
              if(!drones.isEmpty()) {
                  return ResponseHandler.responseBuilder("All drones fetched successfully.", HttpStatus.OK, drones);
              }
              return ResponseHandler.responseBuilder("The drone list is empty.", HttpStatus.OK);
          }
      
          @GetMapping("/get_drones_by_state/{state}")
          public ResponseEntity<?> getDronesByState(@PathVariable DroneState state) {
              List<Optional<Drone>> drones = droneService.findDroneByState(state);
              if(drones.isEmpty()) {
                  return ResponseHandler.responseBuilder("The drones list by state " + state + " is empty.", HttpStatus.OK);
              }
              return ResponseHandler.responseBuilder("Drones fetched by state.", HttpStatus.OK, drones);
          }
      
          @GetMapping("/get_drones_by_model/{model}")
          public ResponseEntity<?> getDronesByModel(@PathVariable DroneModel model) {
              List<Optional<Drone>> drones = droneService.findDronesByModel(model);
              if(drones.isEmpty()) {
                  return ResponseHandler.responseBuilder("The drones list by model " + model + " is empty.", HttpStatus.OK);
              }
              return ResponseHandler.responseBuilder("Drones fetched by model.", HttpStatus.OK, drones);
          }
      
          @GetMapping("/get_drones_by_charge/{percentage}")
          public ResponseEntity<?> getDronesByCharge(@PathVariable int percentage) {
              List<Optional<Drone>> drones = droneService.findDronesByBatteryCapacityAfter(percentage);
              if(drones.isEmpty()) {
                  return ResponseHandler.responseBuilder("The drones list by percentage " + percentage + " is empty.", HttpStatus.OK);
              }
              return ResponseHandler.responseBuilder("Drones fetched by charge.", HttpStatus.OK, drones);
          }
      
      }
    learner_created: true
  - name: src/DroneMed/services/UserService.java
    visible: true
    text: |
      package DroneMed.services;
      
      import DroneMed.models.Drone;
      import DroneMed.models.UserAccount;
      import DroneMed.repositories.DroneRepository;
      import DroneMed.repositories.UserAccountRepository;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.stereotype.Service;
      
      import javax.transaction.Transactional;
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Optional;
      
      @Service
      public class UserService {
      
          private final UserAccountRepository repository;
      
          @Autowired
          public UserService(UserAccountRepository repository) {
              this.repository = repository;
          }
      
          public List<UserAccount> getAllUsers() {
              return (List<UserAccount>) repository.findAll();
          }
      
      
          public String createUser(UserAccount userAccount) {
              try {
                  repository.save(userAccount);
                  return "The user with phone number " + userAccount.getPhoneNumber() + " was created successfully.";
              } catch (Exception e) {
                  return "The parameter you entered contains a null or invalid parameter, Please enter a valid user account parameter.";
              }
          }
      
          public String updateUser(UserAccount userAccount) {
              try {
                  if (repository.findByPhoneNumber(userAccount.getPhoneNumber()) == null) {
                      return "The user with phone number " + userAccount.getPhoneNumber() + " was not found.";
                  }
                  repository.save(userAccount);
                  return "The user with phone number " + userAccount.getPhoneNumber() + " was updated successfully.";
              } catch (Exception e) {
                  return "The user with phone number " + userAccount.getPhoneNumber() + " was not found.";
              }
          }
      
      
          public String deleteUser(String phoneNumber) {
              try {
                  repository.delete(repository.findByPhoneNumber(phoneNumber));
                  return "The user with phone number " + phoneNumber + " was deleted Successfully.";
              } catch (Exception e) {
                  return "The user with phone number " + phoneNumber + " was not found.";
              }
          }
      
          public Optional<UserAccount> getUser(String phoneNumber) {
              return Optional.ofNullable(repository.findByPhoneNumber(phoneNumber));
          }
      
      
          @Transactional
          public List<String> createUsers(List<UserAccount> users) {
              List<String> res = new ArrayList<>();
              for (UserAccount u: users) {
                  res.add(createUser(u));
              }
              return res;
          }
      }
    learner_created: true
  - name: src/DroneMed/mappers/MedicationMapper.java
    visible: true
    text: |
      package DroneMed.mappers;
      
      import DroneMed.models.Medication;
      import DroneMed.models.MedicationDTO;
      import org.springframework.stereotype.Component;
      
      import java.util.Optional;
      
      @Component
      public class MedicationMapper {
          public MedicationDTO medicationToMedicationDTO(Medication medication) {
              long dispatchID = medication.getDroneDispatch() == null ? -1L : medication.getDroneDispatch().getDispatchId();
              return new MedicationDTO(
                      medication.getCode(),
                      medication.getName(),
                      medication.getWeight(),
                      medication.getImageURL(),
                      dispatchID
              );
          }
      
          public MedicationDTO medicationToMedicationDTO(Optional<Medication> medication) {
              long dispatchID = medication.get().getDroneDispatch() == null ? -1L : medication.get().getDroneDispatch().getDispatchId();
              return new MedicationDTO(
                      medication.get().getCode(),
                      medication.get().getName(),
                      medication.get().getWeight(),
                      medication.get().getImageURL(),
                      dispatchID
              );
          }
      }
    learner_created: true
  - name: src/DroneMed/models/DroneDispatch.java
    visible: true
    text: |
      package DroneMed.models;
      
      import javax.persistence.*;
      import javax.validation.constraints.NotNull;
      import java.sql.Timestamp;
      import java.time.LocalTime;
      import java.util.List;
      
      @Entity
      public class DroneDispatch {
          @Id
          @GeneratedValue(strategy = GenerationType.AUTO)
          private Long dispatchId;
      
          @NotNull
          private boolean cancelled;
      
          @NotNull
          private LocalTime estimatedTime;
          //LocalTime.of(2, 30))
      
          private Timestamp timestamp;
      
          @OneToOne
          @JoinColumn(name = "serialNumber")
          private Drone drone;
      
          @OneToOne
          @JoinColumn(name = "phoneNumber")
          private UserAccount user;
      
          @OneToMany(mappedBy = "droneDispatch")
          private List<Medication> medications;
      
          public DroneDispatch() {
          }
      
          public DroneDispatch(
                  Long dispatchId,
                  boolean cancelled,
                  LocalTime estimatedTime,
                  Timestamp timestamp,
                  Drone drone,
                  UserAccount user,
                  List<Medication> medications
          ) {
              this.dispatchId = dispatchId;
              this.cancelled = cancelled;
              this.estimatedTime = estimatedTime;
              this.timestamp = timestamp;
              this.drone = drone;
              this.user = user;
              this.medications = medications;
          }
      
          public Long getDispatchId() {
              return dispatchId;
          }
      
          public void setDispatchId(Long dispatchId) {
              this.dispatchId = dispatchId;
          }
      
          public boolean isCancelled() {
              return cancelled;
          }
      
          public void setCancelled(boolean cancelled) {
              this.cancelled = cancelled;
          }
      
          public LocalTime getEstimatedTime() {
              return estimatedTime;
          }
      
          public void setEstimatedTime(LocalTime estimatedTime) {
              this.estimatedTime = estimatedTime;
          }
      
          public Timestamp getTimestamp() {
              return timestamp;
          }
      
          public void setTimestamp(Timestamp timestamp) {
              this.timestamp = timestamp;
          }
      
          public Drone getDrone() {
              return drone;
          }
      
          public void setDrone(Drone drone) {
              this.drone = drone;
          }
      
          public UserAccount getUser() {
              return user;
          }
      
          public void setUser(UserAccount user) {
              this.user = user;
          }
      
          public List<Medication> getMedications() {
              return medications;
          }
      
          public void setMedications(List<Medication> medications) {
              this.medications = medications;
          }
      
          @Override
          public String toString() {
              return "DroneDispatch{" +
                      "dispatchId=" + dispatchId +
                      ", cancelled=" + cancelled +
                      ", estimatedTime=" + estimatedTime +
                      ", timestamp=" + timestamp +
                      ", drone=" + drone +
                      ", user=" + user +
                      ", medications=" + medications +
                      '}';
          }
      }
    learner_created: true
  - name: src/DroneMed/repositories/UserAccountRepository.java
    visible: true
    text: |
      package DroneMed.repositories;
      
      import DroneMed.models.UserAccount;
      import org.springframework.data.jpa.repository.JpaRepository;
      import org.springframework.data.repository.CrudRepository;
      
      public interface UserAccountRepository extends JpaRepository<UserAccount, String> {
          UserAccount findByPhoneNumber(String phoneNumber);
      }
    learner_created: true
  - name: src/DroneMed/controllers/UserController.java
    visible: true
    text: |
      package DroneMed.controllers;
      
      import DroneMed.models.UserAccount;
      import DroneMed.responses.ResponseHandler;
      import DroneMed.services.UserService;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;
      
      import java.util.List;
      import java.util.Optional;
      
      @RestController
      @RequestMapping("/users")
      public class UserController {
          private final UserService userService;
      
          @Autowired
          public UserController(UserService userService) {
              this.userService = userService;
          }
      
          @PostMapping("/create_user")
          public ResponseEntity<?> createUser(@RequestBody UserAccount userAccount) {
              String res = userService.createUser(userAccount);
              if(res.contains("not found.")) {
                  return ResponseHandler.responseBuilder(res, HttpStatus.NOT_FOUND);
              }
              return ResponseHandler.responseBuilder(res, HttpStatus.OK);
          }
      
          @PostMapping("/create_users")
          public ResponseEntity<?> createUsers(@RequestBody List<UserAccount> userAccounts) {
              List<String> res = userService.createUsers(userAccounts);
              return ResponseHandler.responseBuilder("Users created successfully.", HttpStatus.OK, res);
          }
      
          @PutMapping("/update_user")
          public ResponseEntity<?> updateUser(@RequestBody UserAccount user) {
              String res = userService.updateUser(user);
              if(res.contains("not found.")) {
                  return ResponseHandler.responseBuilder(res, HttpStatus.NOT_FOUND);
              }
              return ResponseHandler.responseBuilder(res, HttpStatus.OK);
          }
      
          @DeleteMapping("/delete_user/{phoneNumber}")
          public ResponseEntity<?> deleteUser(@PathVariable String phoneNumber) {
              String res = userService.deleteUser(phoneNumber);
              if(res.contains("not found.")) {
                  return ResponseHandler.responseBuilder(res, HttpStatus.NOT_FOUND);
              }
              return ResponseHandler.responseBuilder(res, HttpStatus.OK);
          }
      
          @GetMapping("/get_user/{phoneNumber}")
          public ResponseEntity<?> getUser(@PathVariable String phoneNumber) {
              Optional<UserAccount> userAccount = userService.getUser(phoneNumber);
              if(userAccount.isPresent()) {
                  return ResponseHandler.responseBuilder("User fetched successfully.", HttpStatus.OK, userAccount);
              }
              return ResponseHandler.responseBuilder("The user with phone number " + phoneNumber + " was not found.", HttpStatus.NOT_FOUND);
          }
      
          @GetMapping("/get_all_users")
          public ResponseEntity<?> getAllUsers() {
              List<UserAccount> userAccounts = userService.getAllUsers();
              if(!userAccounts.isEmpty()) {
                  return ResponseHandler.responseBuilder("All users fetched successfully.", HttpStatus.OK, userAccounts);
              }
              return ResponseHandler.responseBuilder("The user list is empty.", HttpStatus.OK);
          }
      
      }
    learner_created: true
  - name: src/DroneMed/models/DroneDispatchDTO.java
    visible: true
    text: |
      package DroneMed.models;
      
      import lombok.Data;
      
      import java.time.LocalTime;
      import java.util.List;
      
      public class DroneDispatchDTO {
          private Long dispatchId;
          private Boolean cancelled;
          private LocalTime estimatedTime;
          private String droneID;
          private String droneStatus;
          private String userName;
          private String userPhoneNumber;
          private List<String> medicationCodes;
      
          public DroneDispatchDTO(
                  Long dispatchId,
                  Boolean cancelled,
                  LocalTime estimatedTime,
                  String droneID,
                  String droneStatus,
                  String userName,
                  String userPhoneNumber,
                  List<String> medicationCodes
          ) {
              this.dispatchId = dispatchId;
              this.cancelled = cancelled;
              this.estimatedTime = estimatedTime;
              this.droneID = droneID;
              this.droneStatus = droneStatus;
              this.userName = userName;
              this.userPhoneNumber = userPhoneNumber;
              this.medicationCodes = medicationCodes;
          }
      
          public Long getDispatchId() {
              return dispatchId;
          }
      
          public void setDispatchId(Long dispatchId) {
              this.dispatchId = dispatchId;
          }
      
          public Boolean getCancelled() {
              return cancelled;
          }
      
          public void setCancelled(Boolean cancelled) {
              this.cancelled = cancelled;
          }
      
          public LocalTime getEstimatedTime() {
              return estimatedTime;
          }
      
          public void setEstimatedTime(LocalTime estimatedTime) {
              this.estimatedTime = estimatedTime;
          }
      
          public String getDroneID() {
              return droneID;
          }
      
          public void setDroneID(String droneID) {
              this.droneID = droneID;
          }
      
          public String getDroneStatus() {
              return droneStatus;
          }
      
          public void setDroneStatus(String droneStatus) {
              this.droneStatus = droneStatus;
          }
      
          public String getUserName() {
              return userName;
          }
      
          public void setUserName(String userName) {
              this.userName = userName;
          }
      
          public String getUserPhoneNumber() {
              return userPhoneNumber;
          }
      
          public void setUserPhoneNumber(String userPhoneNumber) {
              this.userPhoneNumber = userPhoneNumber;
          }
      
          public List<String> getMedicationCodes() {
              return medicationCodes;
          }
      
          public void setMedicationCodes(List<String> medicationCodes) {
              this.medicationCodes = medicationCodes;
          }
      }
    learner_created: true
  - name: src/DroneMed/repositories/MedicationRepository.java
    visible: true
    text: |
      package DroneMed.repositories;
      
      import DroneMed.models.Medication;
      import org.springframework.data.jpa.repository.JpaRepository;
      import org.springframework.data.repository.CrudRepository;
      
      import java.util.List;
      import java.util.Optional;
      
      public interface MedicationRepository extends JpaRepository<Medication, String> {
          Medication findByCode(String code);
          List<Optional<Medication>> findByName(String name);
      
      }
    learner_created: true
  - name: log/dipatchinfo
    visible: true
    learner_created: true
  - name: log/dispatchlog.txt
    visible: true
    learner_created: true
  - name: src/DroneMed/Runner.java
    visible: true
    learner_created: true
  - name: src/DroneMed/models/Account.java
    visible: true
    learner_created: true
  - name: src/DroneMed/models/DroneModel.java
    visible: true
    learner_created: true
  - name: src/DroneMed/models/DroneState.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/45549#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 23 Apr 2024 03:09:38 UTC"
record: -1
